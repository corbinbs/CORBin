functor IdlLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Idl_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* User Declarations *)



end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\000\000\
\\001\000\001\000\193\001\007\000\193\001\009\000\193\001\012\000\193\001\
\\013\000\193\001\020\000\193\001\021\000\193\001\023\000\193\001\
\\024\000\193\001\036\000\193\001\041\000\193\001\043\000\193\001\
\\045\000\193\001\057\000\193\001\084\000\193\001\000\000\
\\001\000\001\000\194\001\007\000\194\001\009\000\194\001\012\000\194\001\
\\013\000\194\001\020\000\194\001\021\000\194\001\023\000\194\001\
\\024\000\194\001\036\000\194\001\041\000\194\001\043\000\194\001\
\\045\000\194\001\057\000\194\001\084\000\194\001\000\000\
\\001\000\001\000\195\001\007\000\195\001\009\000\195\001\012\000\195\001\
\\013\000\195\001\020\000\195\001\021\000\195\001\023\000\195\001\
\\024\000\195\001\036\000\195\001\041\000\195\001\043\000\195\001\
\\045\000\195\001\057\000\195\001\084\000\195\001\000\000\
\\001\000\001\000\196\001\007\000\196\001\009\000\196\001\012\000\196\001\
\\013\000\196\001\020\000\196\001\021\000\196\001\023\000\196\001\
\\024\000\196\001\036\000\196\001\041\000\196\001\043\000\196\001\
\\045\000\196\001\057\000\196\001\084\000\196\001\000\000\
\\001\000\001\000\197\001\007\000\197\001\009\000\197\001\012\000\197\001\
\\013\000\197\001\020\000\197\001\021\000\197\001\023\000\197\001\
\\024\000\197\001\036\000\197\001\041\000\197\001\043\000\197\001\
\\045\000\197\001\057\000\197\001\084\000\197\001\000\000\
\\001\000\001\000\198\001\007\000\198\001\009\000\198\001\012\000\198\001\
\\013\000\198\001\020\000\198\001\021\000\198\001\023\000\198\001\
\\024\000\198\001\036\000\198\001\041\000\198\001\043\000\198\001\
\\045\000\198\001\057\000\198\001\084\000\198\001\000\000\
\\001\000\001\000\036\000\007\000\035\000\009\000\034\000\012\000\033\000\
\\013\000\032\000\020\000\031\000\021\000\030\000\023\000\029\000\
\\024\000\028\000\036\000\027\000\041\000\026\000\043\000\025\000\
\\045\000\024\000\000\000\
\\001\000\001\000\036\000\007\000\035\000\009\000\034\000\012\000\033\000\
\\013\000\032\000\020\000\031\000\021\000\030\000\023\000\029\000\
\\024\000\028\000\036\000\027\000\041\000\026\000\043\000\025\000\
\\045\000\024\000\057\000\200\001\000\000\
\\001\000\001\000\036\000\007\000\035\000\009\000\034\000\012\000\033\000\
\\013\000\032\000\020\000\031\000\021\000\030\000\023\000\029\000\
\\024\000\028\000\036\000\027\000\041\000\026\000\043\000\025\000\
\\045\000\024\000\084\000\023\000\000\000\
\\001\000\001\000\036\000\007\000\035\000\009\000\034\000\012\000\033\000\
\\013\000\032\000\020\000\031\000\021\000\030\000\023\000\029\000\
\\024\000\028\000\036\000\027\000\041\000\026\000\043\000\025\000\
\\045\000\024\000\084\000\046\000\000\000\
\\001\000\002\000\219\001\003\000\219\001\004\000\219\001\006\000\219\001\
\\007\000\219\001\011\000\219\001\012\000\219\001\013\000\219\001\
\\014\000\219\001\017\000\219\001\022\000\219\001\024\000\219\001\
\\025\000\219\001\026\000\219\001\027\000\219\001\029\000\219\001\
\\030\000\219\001\032\000\219\001\034\000\219\001\035\000\219\001\
\\036\000\219\001\041\000\219\001\042\000\219\001\043\000\219\001\
\\044\000\219\001\046\000\219\001\047\000\219\001\048\000\219\001\
\\053\000\219\001\057\000\219\001\074\000\219\001\000\000\
\\001\000\002\000\220\001\003\000\220\001\004\000\220\001\006\000\220\001\
\\007\000\220\001\011\000\220\001\012\000\220\001\013\000\220\001\
\\014\000\220\001\017\000\220\001\022\000\220\001\024\000\220\001\
\\025\000\220\001\026\000\220\001\027\000\220\001\029\000\220\001\
\\030\000\220\001\032\000\220\001\034\000\220\001\035\000\220\001\
\\036\000\220\001\041\000\220\001\042\000\220\001\043\000\220\001\
\\044\000\220\001\046\000\220\001\047\000\220\001\048\000\220\001\
\\053\000\220\001\057\000\220\001\074\000\220\001\000\000\
\\001\000\002\000\221\001\003\000\221\001\004\000\221\001\006\000\221\001\
\\007\000\221\001\011\000\221\001\012\000\221\001\013\000\221\001\
\\014\000\221\001\017\000\221\001\022\000\221\001\024\000\221\001\
\\025\000\221\001\026\000\221\001\027\000\221\001\029\000\221\001\
\\030\000\221\001\032\000\221\001\034\000\221\001\035\000\221\001\
\\036\000\221\001\041\000\221\001\042\000\221\001\043\000\221\001\
\\044\000\221\001\046\000\221\001\047\000\221\001\048\000\221\001\
\\053\000\221\001\057\000\221\001\074\000\221\001\000\000\
\\001\000\002\000\222\001\003\000\222\001\004\000\222\001\006\000\222\001\
\\007\000\222\001\011\000\222\001\012\000\222\001\013\000\222\001\
\\014\000\222\001\017\000\222\001\022\000\222\001\024\000\222\001\
\\025\000\222\001\026\000\222\001\027\000\222\001\029\000\222\001\
\\030\000\222\001\032\000\222\001\034\000\222\001\035\000\222\001\
\\036\000\222\001\041\000\222\001\042\000\222\001\043\000\222\001\
\\044\000\222\001\046\000\222\001\047\000\222\001\048\000\222\001\
\\053\000\222\001\057\000\222\001\074\000\222\001\000\000\
\\001\000\002\000\223\001\003\000\223\001\004\000\223\001\006\000\223\001\
\\007\000\223\001\011\000\223\001\012\000\223\001\013\000\223\001\
\\014\000\223\001\017\000\223\001\022\000\223\001\024\000\223\001\
\\025\000\223\001\026\000\223\001\027\000\223\001\029\000\223\001\
\\030\000\223\001\032\000\223\001\034\000\223\001\035\000\223\001\
\\036\000\223\001\041\000\223\001\042\000\223\001\043\000\223\001\
\\044\000\223\001\046\000\223\001\047\000\223\001\048\000\223\001\
\\053\000\223\001\057\000\223\001\074\000\223\001\000\000\
\\001\000\002\000\012\002\003\000\012\002\004\000\012\002\006\000\012\002\
\\007\000\012\002\011\000\012\002\012\000\012\002\013\000\012\002\
\\014\000\012\002\017\000\012\002\022\000\012\002\024\000\012\002\
\\025\000\012\002\026\000\012\002\027\000\012\002\029\000\012\002\
\\030\000\012\002\032\000\012\002\034\000\012\002\035\000\012\002\
\\036\000\012\002\041\000\012\002\042\000\012\002\043\000\012\002\
\\044\000\012\002\046\000\012\002\047\000\012\002\048\000\012\002\
\\053\000\012\002\057\000\012\002\074\000\012\002\000\000\
\\001\000\002\000\013\002\003\000\013\002\004\000\013\002\006\000\013\002\
\\007\000\013\002\011\000\013\002\012\000\013\002\013\000\013\002\
\\014\000\013\002\017\000\013\002\022\000\013\002\024\000\013\002\
\\025\000\013\002\026\000\013\002\027\000\013\002\029\000\013\002\
\\030\000\013\002\032\000\013\002\034\000\013\002\035\000\013\002\
\\036\000\013\002\041\000\013\002\042\000\013\002\043\000\013\002\
\\044\000\013\002\046\000\013\002\047\000\013\002\048\000\013\002\
\\053\000\013\002\057\000\013\002\074\000\013\002\000\000\
\\001\000\002\000\014\002\003\000\014\002\004\000\014\002\006\000\014\002\
\\007\000\014\002\011\000\014\002\012\000\014\002\013\000\014\002\
\\014\000\014\002\017\000\014\002\022\000\014\002\024\000\014\002\
\\025\000\014\002\026\000\014\002\027\000\014\002\029\000\014\002\
\\030\000\014\002\032\000\014\002\034\000\014\002\035\000\014\002\
\\036\000\014\002\041\000\014\002\042\000\014\002\043\000\014\002\
\\044\000\014\002\046\000\014\002\047\000\014\002\048\000\014\002\
\\053\000\014\002\057\000\014\002\074\000\014\002\000\000\
\\001\000\002\000\015\002\003\000\015\002\004\000\015\002\006\000\015\002\
\\007\000\015\002\011\000\015\002\012\000\015\002\013\000\015\002\
\\014\000\015\002\017\000\015\002\022\000\015\002\024\000\015\002\
\\025\000\015\002\026\000\015\002\027\000\015\002\029\000\015\002\
\\030\000\015\002\032\000\015\002\034\000\015\002\035\000\015\002\
\\036\000\015\002\041\000\015\002\042\000\015\002\043\000\015\002\
\\044\000\015\002\046\000\015\002\047\000\015\002\048\000\015\002\
\\053\000\015\002\057\000\015\002\074\000\015\002\000\000\
\\001\000\002\000\016\002\003\000\016\002\004\000\016\002\006\000\016\002\
\\007\000\016\002\011\000\016\002\012\000\016\002\013\000\016\002\
\\014\000\016\002\017\000\016\002\022\000\016\002\024\000\016\002\
\\025\000\016\002\026\000\016\002\027\000\016\002\029\000\016\002\
\\030\000\016\002\032\000\016\002\034\000\016\002\035\000\016\002\
\\036\000\016\002\041\000\016\002\042\000\016\002\043\000\016\002\
\\044\000\016\002\046\000\016\002\047\000\016\002\048\000\016\002\
\\053\000\016\002\057\000\016\002\074\000\016\002\000\000\
\\001\000\002\000\017\002\003\000\017\002\004\000\017\002\006\000\017\002\
\\007\000\017\002\011\000\017\002\012\000\017\002\013\000\017\002\
\\014\000\017\002\017\000\017\002\022\000\017\002\024\000\017\002\
\\025\000\017\002\026\000\017\002\027\000\017\002\029\000\017\002\
\\030\000\017\002\032\000\017\002\034\000\017\002\035\000\017\002\
\\036\000\017\002\041\000\017\002\042\000\017\002\043\000\017\002\
\\044\000\017\002\046\000\017\002\047\000\017\002\048\000\017\002\
\\053\000\017\002\057\000\017\002\074\000\017\002\000\000\
\\001\000\002\000\018\002\003\000\018\002\004\000\018\002\006\000\018\002\
\\007\000\018\002\011\000\018\002\012\000\018\002\013\000\018\002\
\\014\000\018\002\017\000\018\002\022\000\018\002\024\000\018\002\
\\025\000\018\002\026\000\018\002\027\000\018\002\029\000\018\002\
\\030\000\018\002\032\000\018\002\034\000\018\002\035\000\018\002\
\\036\000\018\002\041\000\018\002\042\000\018\002\043\000\018\002\
\\044\000\018\002\046\000\018\002\047\000\018\002\048\000\018\002\
\\053\000\018\002\057\000\018\002\074\000\018\002\000\000\
\\001\000\002\000\023\002\004\000\023\002\006\000\023\002\011\000\023\002\
\\017\000\023\002\022\000\023\002\025\000\023\002\026\000\023\002\
\\034\000\023\002\035\000\023\002\042\000\023\002\044\000\023\002\
\\047\000\023\002\048\000\023\002\053\000\023\002\074\000\023\002\000\000\
\\001\000\002\000\133\002\004\000\133\002\006\000\133\002\011\000\133\002\
\\013\000\133\002\016\000\133\002\017\000\133\002\022\000\133\002\
\\025\000\133\002\026\000\133\002\033\000\133\002\034\000\133\002\
\\035\000\133\002\036\000\133\002\042\000\133\002\043\000\133\002\
\\044\000\133\002\047\000\133\002\048\000\133\002\053\000\133\002\
\\057\000\133\002\074\000\133\002\000\000\
\\001\000\002\000\144\002\004\000\144\002\006\000\144\002\011\000\144\002\
\\013\000\144\002\016\000\144\002\017\000\144\002\022\000\144\002\
\\025\000\144\002\026\000\144\002\033\000\144\002\034\000\144\002\
\\035\000\144\002\036\000\144\002\042\000\144\002\043\000\144\002\
\\044\000\144\002\047\000\144\002\048\000\144\002\053\000\144\002\
\\074\000\144\002\000\000\
\\001\000\002\000\145\002\004\000\145\002\005\000\158\001\006\000\145\002\
\\010\000\157\001\011\000\145\002\013\000\145\002\016\000\145\002\
\\017\000\145\002\022\000\145\002\025\000\145\002\026\000\145\002\
\\033\000\145\002\034\000\145\002\035\000\145\002\036\000\145\002\
\\042\000\145\002\043\000\145\002\044\000\145\002\047\000\145\002\
\\048\000\145\002\053\000\145\002\074\000\145\002\000\000\
\\001\000\002\000\146\002\004\000\146\002\005\000\146\002\006\000\146\002\
\\010\000\146\002\011\000\146\002\013\000\146\002\016\000\146\002\
\\017\000\146\002\022\000\146\002\025\000\146\002\026\000\146\002\
\\033\000\146\002\034\000\146\002\035\000\146\002\036\000\146\002\
\\042\000\146\002\043\000\146\002\044\000\146\002\047\000\146\002\
\\048\000\146\002\053\000\146\002\074\000\146\002\000\000\
\\001\000\002\000\147\002\004\000\147\002\005\000\147\002\006\000\147\002\
\\010\000\147\002\011\000\147\002\013\000\147\002\016\000\147\002\
\\017\000\147\002\022\000\147\002\025\000\147\002\026\000\147\002\
\\033\000\147\002\034\000\147\002\035\000\147\002\036\000\147\002\
\\042\000\147\002\043\000\147\002\044\000\147\002\047\000\147\002\
\\048\000\147\002\053\000\147\002\074\000\147\002\000\000\
\\001\000\002\000\183\002\004\000\183\002\006\000\183\002\011\000\183\002\
\\017\000\183\002\022\000\183\002\025\000\183\002\026\000\183\002\
\\034\000\183\002\035\000\183\002\042\000\183\002\044\000\183\002\
\\046\000\183\002\047\000\183\002\048\000\183\002\053\000\183\002\
\\074\000\183\002\000\000\
\\001\000\002\000\192\002\004\000\192\002\006\000\192\002\011\000\192\002\
\\017\000\192\002\022\000\192\002\025\000\192\002\026\000\192\002\
\\034\000\192\002\035\000\192\002\042\000\192\002\044\000\192\002\
\\047\000\192\002\048\000\192\002\053\000\192\002\074\000\192\002\000\000\
\\001\000\002\000\193\002\004\000\193\002\006\000\193\002\011\000\193\002\
\\017\000\193\002\022\000\193\002\025\000\193\002\026\000\193\002\
\\034\000\193\002\035\000\193\002\042\000\193\002\044\000\193\002\
\\047\000\193\002\048\000\193\002\053\000\193\002\074\000\193\002\000\000\
\\001\000\002\000\194\002\004\000\194\002\006\000\194\002\011\000\194\002\
\\017\000\194\002\022\000\194\002\025\000\194\002\026\000\194\002\
\\034\000\194\002\035\000\194\002\042\000\194\002\044\000\194\002\
\\047\000\194\002\048\000\194\002\053\000\194\002\074\000\194\002\000\000\
\\001\000\002\000\099\000\003\000\147\000\004\000\098\000\006\000\097\000\
\\007\000\035\000\011\000\096\000\012\000\033\000\013\000\032\000\
\\014\000\146\000\017\000\094\000\022\000\093\000\024\000\028\000\
\\025\000\092\000\026\000\091\000\027\000\145\000\029\000\144\000\
\\030\000\143\000\032\000\142\000\034\000\089\000\035\000\088\000\
\\036\000\027\000\041\000\026\000\042\000\086\000\043\000\025\000\
\\044\000\084\000\046\000\141\000\047\000\083\000\048\000\082\000\
\\053\000\081\000\057\000\246\001\074\000\080\000\000\000\
\\001\000\002\000\099\000\003\000\147\000\004\000\098\000\006\000\097\000\
\\007\000\035\000\011\000\096\000\012\000\033\000\013\000\032\000\
\\014\000\146\000\017\000\094\000\022\000\093\000\024\000\028\000\
\\025\000\092\000\026\000\091\000\027\000\145\000\029\000\144\000\
\\030\000\143\000\032\000\142\000\034\000\089\000\035\000\088\000\
\\036\000\027\000\041\000\026\000\042\000\086\000\043\000\025\000\
\\044\000\084\000\046\000\141\000\047\000\083\000\048\000\082\000\
\\053\000\081\000\057\000\140\000\074\000\080\000\000\000\
\\001\000\002\000\099\000\003\000\147\000\004\000\098\000\006\000\097\000\
\\007\000\035\000\011\000\096\000\012\000\033\000\013\000\032\000\
\\017\000\094\000\022\000\093\000\024\000\028\000\025\000\092\000\
\\026\000\091\000\027\000\145\000\032\000\142\000\034\000\089\000\
\\035\000\088\000\036\000\027\000\041\000\026\000\042\000\086\000\
\\043\000\025\000\044\000\084\000\046\000\141\000\047\000\083\000\
\\048\000\082\000\053\000\081\000\057\000\216\001\074\000\080\000\000\000\
\\001\000\002\000\099\000\003\000\147\000\004\000\098\000\006\000\097\000\
\\007\000\035\000\011\000\096\000\012\000\033\000\013\000\032\000\
\\017\000\094\000\022\000\093\000\024\000\028\000\025\000\092\000\
\\026\000\091\000\027\000\145\000\032\000\142\000\034\000\089\000\
\\035\000\088\000\036\000\027\000\041\000\026\000\042\000\086\000\
\\043\000\025\000\044\000\084\000\046\000\141\000\047\000\083\000\
\\048\000\082\000\053\000\081\000\057\000\218\001\074\000\080\000\000\000\
\\001\000\002\000\099\000\003\000\147\000\004\000\098\000\006\000\097\000\
\\007\000\035\000\011\000\096\000\012\000\033\000\013\000\032\000\
\\017\000\094\000\022\000\093\000\024\000\028\000\025\000\092\000\
\\026\000\091\000\027\000\145\000\032\000\142\000\034\000\089\000\
\\035\000\088\000\036\000\027\000\041\000\026\000\042\000\086\000\
\\043\000\025\000\044\000\084\000\046\000\141\000\047\000\083\000\
\\048\000\082\000\053\000\081\000\057\000\150\000\074\000\080\000\000\000\
\\001\000\002\000\099\000\003\000\147\000\004\000\098\000\006\000\097\000\
\\007\000\035\000\011\000\096\000\012\000\033\000\013\000\032\000\
\\017\000\094\000\022\000\093\000\024\000\028\000\025\000\092\000\
\\026\000\091\000\027\000\145\000\032\000\142\000\034\000\089\000\
\\035\000\088\000\036\000\027\000\041\000\026\000\042\000\086\000\
\\043\000\025\000\044\000\084\000\046\000\141\000\047\000\083\000\
\\048\000\082\000\053\000\081\000\057\000\065\001\074\000\080\000\000\000\
\\001\000\002\000\099\000\003\000\147\000\004\000\098\000\006\000\097\000\
\\007\000\035\000\011\000\096\000\012\000\033\000\013\000\032\000\
\\017\000\094\000\022\000\093\000\024\000\028\000\025\000\092\000\
\\026\000\091\000\027\000\145\000\032\000\142\000\034\000\089\000\
\\035\000\088\000\036\000\027\000\041\000\026\000\042\000\086\000\
\\043\000\025\000\044\000\084\000\046\000\141\000\047\000\083\000\
\\048\000\082\000\053\000\081\000\057\000\114\001\074\000\080\000\000\000\
\\001\000\002\000\099\000\004\000\098\000\005\000\158\001\006\000\097\000\
\\010\000\157\001\011\000\096\000\013\000\032\000\016\000\095\000\
\\017\000\094\000\022\000\093\000\025\000\092\000\026\000\091\000\
\\033\000\090\000\034\000\089\000\035\000\088\000\036\000\087\000\
\\042\000\086\000\043\000\085\000\044\000\084\000\047\000\083\000\
\\048\000\082\000\053\000\081\000\074\000\080\000\000\000\
\\001\000\002\000\099\000\004\000\098\000\006\000\097\000\011\000\096\000\
\\013\000\032\000\016\000\095\000\017\000\094\000\022\000\093\000\
\\025\000\092\000\026\000\091\000\033\000\090\000\034\000\089\000\
\\035\000\088\000\036\000\087\000\037\000\156\000\042\000\086\000\
\\043\000\085\000\044\000\084\000\047\000\083\000\048\000\082\000\
\\049\000\237\001\052\000\155\000\053\000\081\000\056\000\250\001\
\\074\000\080\000\000\000\
\\001\000\002\000\099\000\004\000\098\000\006\000\097\000\011\000\096\000\
\\013\000\032\000\016\000\095\000\017\000\094\000\022\000\093\000\
\\025\000\092\000\026\000\091\000\033\000\090\000\034\000\089\000\
\\035\000\088\000\036\000\087\000\042\000\086\000\043\000\085\000\
\\044\000\084\000\047\000\083\000\048\000\082\000\053\000\081\000\
\\057\000\132\002\074\000\080\000\000\000\
\\001\000\002\000\099\000\004\000\098\000\006\000\097\000\011\000\096\000\
\\013\000\032\000\016\000\095\000\017\000\094\000\022\000\093\000\
\\025\000\092\000\026\000\091\000\033\000\090\000\034\000\089\000\
\\035\000\088\000\036\000\087\000\042\000\086\000\043\000\085\000\
\\044\000\084\000\047\000\083\000\048\000\082\000\053\000\081\000\
\\057\000\174\002\074\000\080\000\000\000\
\\001\000\002\000\099\000\004\000\098\000\006\000\097\000\011\000\096\000\
\\013\000\032\000\016\000\095\000\017\000\094\000\022\000\093\000\
\\025\000\092\000\026\000\091\000\033\000\090\000\034\000\089\000\
\\035\000\088\000\036\000\087\000\042\000\086\000\043\000\085\000\
\\044\000\084\000\047\000\083\000\048\000\082\000\053\000\081\000\
\\057\000\001\001\074\000\080\000\000\000\
\\001\000\002\000\099\000\004\000\098\000\006\000\097\000\011\000\096\000\
\\013\000\032\000\016\000\095\000\017\000\094\000\022\000\093\000\
\\025\000\092\000\026\000\091\000\033\000\090\000\034\000\089\000\
\\035\000\088\000\036\000\087\000\042\000\086\000\043\000\085\000\
\\044\000\084\000\047\000\083\000\048\000\082\000\053\000\081\000\
\\074\000\080\000\000\000\
\\001\000\002\000\099\000\004\000\098\000\006\000\097\000\011\000\096\000\
\\016\000\095\000\017\000\094\000\022\000\093\000\025\000\092\000\
\\026\000\091\000\033\000\090\000\034\000\089\000\035\000\088\000\
\\042\000\086\000\044\000\084\000\047\000\083\000\048\000\082\000\
\\053\000\081\000\074\000\080\000\000\000\
\\001\000\002\000\099\000\004\000\098\000\006\000\097\000\011\000\096\000\
\\017\000\094\000\022\000\093\000\025\000\092\000\026\000\091\000\
\\034\000\089\000\035\000\088\000\042\000\086\000\044\000\084\000\
\\046\000\141\000\047\000\083\000\048\000\082\000\053\000\081\000\
\\074\000\080\000\000\000\
\\001\000\002\000\099\000\004\000\098\000\006\000\097\000\011\000\096\000\
\\017\000\094\000\022\000\093\000\025\000\092\000\026\000\091\000\
\\034\000\089\000\035\000\088\000\042\000\086\000\044\000\084\000\
\\047\000\083\000\048\000\082\000\053\000\081\000\074\000\080\000\000\000\
\\001\000\003\000\196\000\000\000\
\\001\000\004\000\098\000\006\000\097\000\011\000\096\000\016\000\120\000\
\\017\000\094\000\022\000\093\000\026\000\091\000\034\000\089\000\
\\035\000\088\000\042\000\086\000\047\000\083\000\048\000\082\000\
\\053\000\081\000\074\000\080\000\000\000\
\\001\000\004\000\098\000\006\000\097\000\013\000\032\000\022\000\028\001\
\\034\000\089\000\042\000\086\000\053\000\081\000\074\000\080\000\000\000\
\\001\000\005\000\142\002\010\000\142\002\057\000\142\002\000\000\
\\001\000\005\000\143\002\010\000\143\002\057\000\143\002\000\000\
\\001\000\005\000\158\001\010\000\157\001\000\000\
\\001\000\005\000\158\001\010\000\157\001\057\000\141\002\000\000\
\\001\000\008\000\186\002\031\000\186\002\049\000\186\002\000\000\
\\001\000\008\000\187\002\031\000\187\002\049\000\187\002\000\000\
\\001\000\008\000\188\002\031\000\188\002\049\000\188\002\000\000\
\\001\000\008\000\195\002\049\000\195\002\000\000\
\\001\000\008\000\196\002\049\000\196\002\000\000\
\\001\000\008\000\069\001\031\000\068\001\049\000\178\002\000\000\
\\001\000\008\000\069\001\031\000\068\001\049\000\182\002\000\000\
\\001\000\008\000\069\001\049\000\176\002\000\000\
\\001\000\008\000\069\001\049\000\180\002\000\000\
\\001\000\011\000\174\000\022\000\173\000\049\000\116\002\051\000\116\002\
\\059\000\116\002\074\000\116\002\000\000\
\\001\000\015\000\054\002\039\000\054\002\053\000\054\002\054\000\054\002\
\\074\000\054\002\000\000\
\\001\000\015\000\055\002\039\000\055\002\053\000\055\002\054\000\055\002\
\\074\000\055\002\000\000\
\\001\000\015\000\056\002\039\000\056\002\053\000\056\002\054\000\056\002\
\\074\000\056\002\000\000\
\\001\000\015\000\241\000\039\000\240\000\053\000\081\000\054\000\239\000\
\\062\000\238\000\063\000\237\000\064\000\236\000\074\000\080\000\000\000\
\\001\000\015\000\241\000\039\000\240\000\053\000\081\000\054\000\239\000\
\\074\000\080\000\000\000\
\\001\000\018\000\075\001\019\000\074\001\028\000\073\001\000\000\
\\001\000\018\000\075\001\019\000\074\001\028\000\073\001\055\000\072\001\000\000\
\\001\000\018\000\084\001\000\000\
\\001\000\018\000\084\001\055\000\083\001\000\000\
\\001\000\020\000\104\000\000\000\
\\001\000\020\000\122\000\045\000\121\000\000\000\
\\001\000\022\000\169\000\034\000\168\000\000\000\
\\001\000\022\000\173\000\055\000\116\002\000\000\
\\001\000\022\000\242\000\049\000\122\002\051\000\122\002\055\000\122\002\
\\059\000\122\002\074\000\122\002\000\000\
\\001\000\037\000\229\001\049\000\229\001\051\000\229\001\052\000\229\001\
\\053\000\229\001\055\000\229\001\056\000\229\001\059\000\229\001\
\\061\000\229\001\062\000\229\001\063\000\229\001\065\000\229\001\
\\066\000\229\001\067\000\229\001\068\000\229\001\069\000\229\001\
\\071\000\229\001\072\000\229\001\073\000\229\001\074\000\229\001\000\000\
\\001\000\037\000\230\001\049\000\230\001\051\000\230\001\052\000\230\001\
\\053\000\230\001\055\000\230\001\056\000\230\001\059\000\230\001\
\\061\000\230\001\062\000\230\001\063\000\230\001\065\000\230\001\
\\066\000\230\001\067\000\230\001\068\000\230\001\069\000\230\001\
\\071\000\230\001\072\000\230\001\073\000\230\001\074\000\230\001\000\000\
\\001\000\037\000\231\001\049\000\231\001\051\000\231\001\052\000\231\001\
\\053\000\231\001\055\000\231\001\056\000\231\001\059\000\231\001\
\\061\000\231\001\062\000\231\001\063\000\231\001\065\000\231\001\
\\066\000\231\001\067\000\231\001\068\000\231\001\069\000\231\001\
\\071\000\231\001\072\000\231\001\073\000\231\001\074\000\231\001\000\000\
\\001\000\037\000\009\002\056\000\009\002\000\000\
\\001\000\037\000\010\002\051\000\204\000\056\000\010\002\000\000\
\\001\000\037\000\011\002\049\000\082\002\051\000\011\002\053\000\164\000\
\\056\000\011\002\000\000\
\\001\000\037\000\011\002\051\000\011\002\053\000\164\000\056\000\011\002\000\000\
\\001\000\037\000\156\000\049\000\236\001\052\000\155\000\053\000\081\000\
\\056\000\006\001\074\000\080\000\000\000\
\\001\000\037\000\156\000\052\000\155\000\053\000\081\000\056\000\248\001\
\\074\000\080\000\000\000\
\\001\000\037\000\205\000\051\000\204\000\056\000\006\002\000\000\
\\001\000\037\000\016\001\056\000\005\002\000\000\
\\001\000\037\000\091\001\051\000\204\000\056\000\004\002\000\000\
\\001\000\037\000\134\001\056\000\003\002\000\000\
\\001\000\038\000\157\000\000\000\
\\001\000\038\000\157\000\049\000\211\002\000\000\
\\001\000\040\000\206\000\000\000\
\\001\000\045\000\108\000\000\000\
\\001\000\049\000\201\001\000\000\
\\001\000\049\000\202\001\000\000\
\\001\000\049\000\203\001\000\000\
\\001\000\049\000\204\001\000\000\
\\001\000\049\000\205\001\000\000\
\\001\000\049\000\206\001\052\000\180\000\056\000\210\001\000\000\
\\001\000\049\000\207\001\052\000\180\000\056\000\212\001\000\000\
\\001\000\049\000\208\001\052\000\180\000\056\000\214\001\000\000\
\\001\000\049\000\232\001\000\000\
\\001\000\049\000\233\001\000\000\
\\001\000\049\000\234\001\000\000\
\\001\000\049\000\235\001\000\000\
\\001\000\049\000\238\001\000\000\
\\001\000\049\000\239\001\000\000\
\\001\000\049\000\240\001\000\000\
\\001\000\049\000\241\001\000\000\
\\001\000\049\000\242\001\000\000\
\\001\000\049\000\243\001\000\000\
\\001\000\049\000\244\001\000\000\
\\001\000\049\000\024\002\000\000\
\\001\000\049\000\035\002\051\000\035\002\052\000\035\002\055\000\035\002\
\\059\000\035\002\061\000\044\001\071\000\035\002\000\000\
\\001\000\049\000\036\002\051\000\036\002\052\000\036\002\055\000\036\002\
\\059\000\036\002\061\000\036\002\067\000\043\001\071\000\036\002\000\000\
\\001\000\049\000\037\002\051\000\037\002\052\000\037\002\055\000\037\002\
\\059\000\037\002\061\000\037\002\067\000\043\001\071\000\037\002\000\000\
\\001\000\049\000\038\002\051\000\038\002\052\000\038\002\055\000\038\002\
\\059\000\038\002\061\000\038\002\066\000\042\001\067\000\038\002\
\\071\000\038\002\000\000\
\\001\000\049\000\039\002\051\000\039\002\052\000\039\002\055\000\039\002\
\\059\000\039\002\061\000\039\002\066\000\042\001\067\000\039\002\
\\071\000\039\002\000\000\
\\001\000\049\000\040\002\051\000\040\002\052\000\040\002\055\000\040\002\
\\059\000\040\002\061\000\040\002\066\000\040\002\067\000\040\002\
\\071\000\040\002\072\000\041\001\073\000\040\001\000\000\
\\001\000\049\000\041\002\051\000\041\002\052\000\041\002\055\000\041\002\
\\059\000\041\002\061\000\041\002\066\000\041\002\067\000\041\002\
\\071\000\041\002\072\000\041\001\073\000\040\001\000\000\
\\001\000\049\000\042\002\051\000\042\002\052\000\042\002\055\000\042\002\
\\059\000\042\002\061\000\042\002\062\000\039\001\063\000\038\001\
\\066\000\042\002\067\000\042\002\071\000\042\002\072\000\042\002\
\\073\000\042\002\000\000\
\\001\000\049\000\043\002\051\000\043\002\052\000\043\002\055\000\043\002\
\\059\000\043\002\061\000\043\002\062\000\039\001\063\000\038\001\
\\066\000\043\002\067\000\043\002\071\000\043\002\072\000\043\002\
\\073\000\043\002\000\000\
\\001\000\049\000\044\002\051\000\044\002\052\000\044\002\055\000\044\002\
\\059\000\044\002\061\000\044\002\062\000\039\001\063\000\038\001\
\\066\000\044\002\067\000\044\002\071\000\044\002\072\000\044\002\
\\073\000\044\002\000\000\
\\001\000\049\000\045\002\051\000\045\002\052\000\045\002\055\000\045\002\
\\059\000\045\002\061\000\045\002\062\000\045\002\063\000\045\002\
\\065\000\037\001\066\000\045\002\067\000\045\002\068\000\036\001\
\\069\000\035\001\071\000\045\002\072\000\045\002\073\000\045\002\000\000\
\\001\000\049\000\046\002\051\000\046\002\052\000\046\002\055\000\046\002\
\\059\000\046\002\061\000\046\002\062\000\046\002\063\000\046\002\
\\065\000\037\001\066\000\046\002\067\000\046\002\068\000\036\001\
\\069\000\035\001\071\000\046\002\072\000\046\002\073\000\046\002\000\000\
\\001\000\049\000\047\002\051\000\047\002\052\000\047\002\055\000\047\002\
\\059\000\047\002\061\000\047\002\062\000\047\002\063\000\047\002\
\\065\000\037\001\066\000\047\002\067\000\047\002\068\000\036\001\
\\069\000\035\001\071\000\047\002\072\000\047\002\073\000\047\002\000\000\
\\001\000\049\000\048\002\051\000\048\002\052\000\048\002\055\000\048\002\
\\059\000\048\002\061\000\048\002\062\000\048\002\063\000\048\002\
\\065\000\048\002\066\000\048\002\067\000\048\002\068\000\048\002\
\\069\000\048\002\071\000\048\002\072\000\048\002\073\000\048\002\000\000\
\\001\000\049\000\049\002\051\000\049\002\052\000\049\002\055\000\049\002\
\\059\000\049\002\061\000\049\002\062\000\049\002\063\000\049\002\
\\065\000\049\002\066\000\049\002\067\000\049\002\068\000\049\002\
\\069\000\049\002\071\000\049\002\072\000\049\002\073\000\049\002\000\000\
\\001\000\049\000\050\002\051\000\050\002\052\000\050\002\055\000\050\002\
\\059\000\050\002\061\000\050\002\062\000\050\002\063\000\050\002\
\\065\000\050\002\066\000\050\002\067\000\050\002\068\000\050\002\
\\069\000\050\002\071\000\050\002\072\000\050\002\073\000\050\002\000\000\
\\001\000\049\000\051\002\051\000\051\002\052\000\051\002\055\000\051\002\
\\059\000\051\002\061\000\051\002\062\000\051\002\063\000\051\002\
\\065\000\051\002\066\000\051\002\067\000\051\002\068\000\051\002\
\\069\000\051\002\071\000\051\002\072\000\051\002\073\000\051\002\000\000\
\\001\000\049\000\052\002\051\000\052\002\052\000\052\002\055\000\052\002\
\\059\000\052\002\061\000\052\002\062\000\052\002\063\000\052\002\
\\065\000\052\002\066\000\052\002\067\000\052\002\068\000\052\002\
\\069\000\052\002\071\000\052\002\072\000\052\002\073\000\052\002\000\000\
\\001\000\049\000\053\002\051\000\053\002\052\000\053\002\055\000\053\002\
\\059\000\053\002\061\000\053\002\062\000\053\002\063\000\053\002\
\\065\000\053\002\066\000\053\002\067\000\053\002\068\000\053\002\
\\069\000\053\002\071\000\053\002\072\000\053\002\073\000\053\002\000\000\
\\001\000\049\000\057\002\051\000\057\002\052\000\057\002\053\000\164\000\
\\055\000\057\002\059\000\057\002\061\000\057\002\062\000\057\002\
\\063\000\057\002\065\000\057\002\066\000\057\002\067\000\057\002\
\\068\000\057\002\069\000\057\002\071\000\057\002\072\000\057\002\
\\073\000\057\002\000\000\
\\001\000\049\000\058\002\051\000\058\002\052\000\058\002\055\000\058\002\
\\059\000\058\002\061\000\058\002\062\000\058\002\063\000\058\002\
\\065\000\058\002\066\000\058\002\067\000\058\002\068\000\058\002\
\\069\000\058\002\071\000\058\002\072\000\058\002\073\000\058\002\000\000\
\\001\000\049\000\059\002\051\000\059\002\052\000\059\002\055\000\059\002\
\\059\000\059\002\061\000\059\002\062\000\059\002\063\000\059\002\
\\065\000\059\002\066\000\059\002\067\000\059\002\068\000\059\002\
\\069\000\059\002\071\000\059\002\072\000\059\002\073\000\059\002\000\000\
\\001\000\049\000\060\002\051\000\060\002\052\000\060\002\055\000\060\002\
\\059\000\060\002\061\000\060\002\062\000\060\002\063\000\060\002\
\\065\000\060\002\066\000\060\002\067\000\060\002\068\000\060\002\
\\069\000\060\002\071\000\060\002\072\000\060\002\073\000\060\002\000\000\
\\001\000\049\000\061\002\051\000\061\002\052\000\061\002\055\000\061\002\
\\059\000\061\002\061\000\061\002\062\000\061\002\063\000\061\002\
\\065\000\061\002\066\000\061\002\067\000\061\002\068\000\061\002\
\\069\000\061\002\071\000\061\002\072\000\061\002\073\000\061\002\000\000\
\\001\000\049\000\062\002\051\000\062\002\052\000\062\002\055\000\062\002\
\\059\000\062\002\061\000\062\002\062\000\062\002\063\000\062\002\
\\065\000\062\002\066\000\062\002\067\000\062\002\068\000\062\002\
\\069\000\062\002\071\000\062\002\072\000\062\002\073\000\062\002\000\000\
\\001\000\049\000\063\002\051\000\063\002\052\000\063\002\055\000\063\002\
\\059\000\063\002\061\000\063\002\062\000\063\002\063\000\063\002\
\\065\000\063\002\066\000\063\002\067\000\063\002\068\000\063\002\
\\069\000\063\002\071\000\063\002\072\000\063\002\073\000\063\002\000\000\
\\001\000\049\000\064\002\051\000\064\002\052\000\064\002\055\000\064\002\
\\059\000\064\002\061\000\064\002\062\000\064\002\063\000\064\002\
\\065\000\064\002\066\000\064\002\067\000\064\002\068\000\064\002\
\\069\000\064\002\071\000\064\002\072\000\064\002\073\000\064\002\000\000\
\\001\000\049\000\065\002\051\000\065\002\052\000\065\002\055\000\065\002\
\\059\000\065\002\061\000\065\002\062\000\065\002\063\000\065\002\
\\065\000\065\002\066\000\065\002\067\000\065\002\068\000\065\002\
\\069\000\065\002\071\000\065\002\072\000\065\002\073\000\065\002\000\000\
\\001\000\049\000\066\002\051\000\066\002\052\000\066\002\055\000\066\002\
\\059\000\066\002\061\000\066\002\062\000\066\002\063\000\066\002\
\\065\000\066\002\066\000\066\002\067\000\066\002\068\000\066\002\
\\069\000\066\002\071\000\066\002\072\000\066\002\073\000\066\002\000\000\
\\001\000\049\000\067\002\051\000\067\002\052\000\067\002\055\000\067\002\
\\059\000\067\002\061\000\067\002\062\000\067\002\063\000\067\002\
\\065\000\067\002\066\000\067\002\067\000\067\002\068\000\067\002\
\\069\000\067\002\071\000\067\002\072\000\067\002\073\000\067\002\000\000\
\\001\000\049\000\068\002\051\000\068\002\052\000\068\002\055\000\068\002\
\\059\000\068\002\061\000\068\002\062\000\068\002\063\000\068\002\
\\065\000\068\002\066\000\068\002\067\000\068\002\068\000\068\002\
\\069\000\068\002\071\000\068\002\072\000\068\002\073\000\068\002\000\000\
\\001\000\049\000\069\002\051\000\069\002\052\000\069\002\055\000\069\002\
\\059\000\069\002\061\000\069\002\062\000\069\002\063\000\069\002\
\\065\000\069\002\066\000\069\002\067\000\069\002\068\000\069\002\
\\069\000\069\002\071\000\069\002\072\000\069\002\073\000\069\002\000\000\
\\001\000\049\000\071\002\000\000\
\\001\000\049\000\072\002\000\000\
\\001\000\049\000\073\002\000\000\
\\001\000\049\000\074\002\000\000\
\\001\000\049\000\075\002\000\000\
\\001\000\049\000\076\002\000\000\
\\001\000\049\000\077\002\000\000\
\\001\000\049\000\078\002\074\000\078\002\000\000\
\\001\000\049\000\079\002\074\000\079\002\000\000\
\\001\000\049\000\080\002\051\000\080\002\059\000\080\002\074\000\080\002\000\000\
\\001\000\049\000\081\002\051\000\081\002\059\000\081\002\074\000\081\002\000\000\
\\001\000\049\000\083\002\051\000\083\002\059\000\083\002\074\000\083\002\000\000\
\\001\000\049\000\084\002\051\000\084\002\059\000\084\002\074\000\084\002\000\000\
\\001\000\049\000\085\002\051\000\085\002\059\000\085\002\074\000\085\002\000\000\
\\001\000\049\000\086\002\051\000\086\002\059\000\086\002\074\000\086\002\000\000\
\\001\000\049\000\087\002\051\000\087\002\059\000\087\002\074\000\087\002\000\000\
\\001\000\049\000\088\002\051\000\088\002\059\000\088\002\074\000\088\002\000\000\
\\001\000\049\000\089\002\051\000\089\002\059\000\089\002\074\000\089\002\000\000\
\\001\000\049\000\090\002\051\000\090\002\059\000\090\002\074\000\090\002\000\000\
\\001\000\049\000\091\002\051\000\091\002\059\000\091\002\074\000\091\002\000\000\
\\001\000\049\000\092\002\051\000\092\002\059\000\092\002\074\000\092\002\000\000\
\\001\000\049\000\093\002\051\000\093\002\059\000\093\002\074\000\093\002\000\000\
\\001\000\049\000\094\002\051\000\094\002\059\000\094\002\074\000\094\002\000\000\
\\001\000\049\000\095\002\051\000\095\002\059\000\095\002\074\000\095\002\000\000\
\\001\000\049\000\096\002\074\000\096\002\000\000\
\\001\000\049\000\097\002\074\000\097\002\000\000\
\\001\000\049\000\098\002\074\000\098\002\000\000\
\\001\000\049\000\099\002\000\000\
\\001\000\049\000\100\002\051\000\211\000\000\000\
\\001\000\049\000\101\002\000\000\
\\001\000\049\000\102\002\051\000\211\000\000\000\
\\001\000\049\000\103\002\051\000\103\002\000\000\
\\001\000\049\000\104\002\051\000\104\002\000\000\
\\001\000\049\000\105\002\051\000\105\002\055\000\105\002\000\000\
\\001\000\049\000\105\002\051\000\105\002\070\000\213\000\000\000\
\\001\000\049\000\106\002\051\000\106\002\000\000\
\\001\000\049\000\107\002\051\000\107\002\059\000\107\002\074\000\107\002\000\000\
\\001\000\049\000\108\002\051\000\108\002\059\000\108\002\074\000\108\002\000\000\
\\001\000\049\000\109\002\051\000\109\002\059\000\109\002\074\000\109\002\000\000\
\\001\000\049\000\110\002\051\000\110\002\055\000\110\002\059\000\110\002\
\\074\000\110\002\000\000\
\\001\000\049\000\111\002\051\000\111\002\055\000\111\002\059\000\111\002\
\\074\000\111\002\000\000\
\\001\000\049\000\112\002\051\000\112\002\055\000\112\002\059\000\112\002\
\\074\000\112\002\000\000\
\\001\000\049\000\113\002\051\000\113\002\055\000\113\002\059\000\113\002\
\\074\000\113\002\000\000\
\\001\000\049\000\114\002\051\000\114\002\055\000\114\002\059\000\114\002\
\\074\000\114\002\000\000\
\\001\000\049\000\115\002\051\000\115\002\055\000\115\002\059\000\115\002\
\\074\000\115\002\000\000\
\\001\000\049\000\117\002\051\000\117\002\055\000\117\002\059\000\117\002\
\\074\000\117\002\000\000\
\\001\000\049\000\118\002\051\000\118\002\055\000\118\002\059\000\118\002\
\\074\000\118\002\000\000\
\\001\000\049\000\119\002\051\000\119\002\055\000\119\002\059\000\119\002\
\\074\000\119\002\000\000\
\\001\000\049\000\120\002\051\000\120\002\055\000\120\002\059\000\120\002\
\\074\000\120\002\000\000\
\\001\000\049\000\121\002\051\000\121\002\055\000\121\002\059\000\121\002\
\\074\000\121\002\000\000\
\\001\000\049\000\123\002\051\000\123\002\055\000\123\002\059\000\123\002\
\\074\000\123\002\000\000\
\\001\000\049\000\124\002\051\000\124\002\055\000\124\002\059\000\124\002\
\\074\000\124\002\000\000\
\\001\000\049\000\125\002\051\000\125\002\059\000\125\002\074\000\125\002\000\000\
\\001\000\049\000\126\002\051\000\126\002\055\000\126\002\059\000\126\002\
\\074\000\126\002\000\000\
\\001\000\049\000\127\002\051\000\127\002\059\000\127\002\074\000\127\002\000\000\
\\001\000\049\000\128\002\051\000\128\002\059\000\128\002\074\000\128\002\000\000\
\\001\000\049\000\129\002\051\000\129\002\059\000\129\002\074\000\129\002\000\000\
\\001\000\049\000\130\002\074\000\130\002\000\000\
\\001\000\049\000\134\002\074\000\134\002\000\000\
\\001\000\049\000\148\002\000\000\
\\001\000\049\000\149\002\055\000\149\002\074\000\149\002\000\000\
\\001\000\049\000\150\002\055\000\150\002\074\000\150\002\000\000\
\\001\000\049\000\154\002\051\000\154\002\059\000\154\002\074\000\154\002\000\000\
\\001\000\049\000\155\002\051\000\155\002\059\000\155\002\074\000\155\002\000\000\
\\001\000\049\000\156\002\051\000\156\002\059\000\156\002\074\000\156\002\000\000\
\\001\000\049\000\157\002\051\000\157\002\058\000\171\000\059\000\157\002\
\\074\000\157\002\000\000\
\\001\000\049\000\158\002\051\000\158\002\059\000\158\002\074\000\158\002\000\000\
\\001\000\049\000\159\002\051\000\159\002\058\000\166\000\059\000\159\002\
\\074\000\159\002\000\000\
\\001\000\049\000\160\002\051\000\160\002\000\000\
\\001\000\049\000\161\002\051\000\161\002\070\000\213\000\000\000\
\\001\000\049\000\162\002\051\000\162\002\000\000\
\\001\000\049\000\163\002\051\000\163\002\070\000\213\000\000\000\
\\001\000\049\000\164\002\051\000\164\002\070\000\164\002\000\000\
\\001\000\049\000\165\002\000\000\
\\001\000\049\000\166\002\051\000\086\001\000\000\
\\001\000\049\000\167\002\000\000\
\\001\000\049\000\168\002\051\000\086\001\000\000\
\\001\000\049\000\169\002\000\000\
\\001\000\049\000\170\002\051\000\086\001\000\000\
\\001\000\049\000\171\002\000\000\
\\001\000\049\000\172\002\000\000\
\\001\000\049\000\175\002\000\000\
\\001\000\049\000\177\002\000\000\
\\001\000\049\000\179\002\000\000\
\\001\000\049\000\181\002\000\000\
\\001\000\049\000\199\002\000\000\
\\001\000\049\000\200\002\000\000\
\\001\000\049\000\207\002\051\000\207\002\059\000\207\002\074\000\207\002\000\000\
\\001\000\049\000\209\002\051\000\209\002\059\000\209\002\074\000\209\002\000\000\
\\001\000\049\000\210\002\056\000\176\000\000\000\
\\001\000\049\000\039\000\000\000\
\\001\000\049\000\040\000\000\000\
\\001\000\049\000\041\000\000\000\
\\001\000\049\000\042\000\000\000\
\\001\000\049\000\043\000\000\000\
\\001\000\049\000\044\000\000\000\
\\001\000\049\000\191\000\000\000\
\\001\000\049\000\192\000\000\000\
\\001\000\049\000\193\000\000\000\
\\001\000\049\000\194\000\000\000\
\\001\000\049\000\195\000\000\000\
\\001\000\049\000\078\001\000\000\
\\001\000\049\000\079\001\000\000\
\\001\000\049\000\110\001\000\000\
\\001\000\049\000\131\001\000\000\
\\001\000\049\000\150\001\000\000\
\\001\000\049\000\181\001\000\000\
\\001\000\049\000\187\001\000\000\
\\001\000\051\000\228\001\053\000\164\000\056\000\228\001\000\000\
\\001\000\051\000\022\002\055\000\022\002\000\000\
\\001\000\051\000\070\002\059\000\070\002\071\000\070\002\000\000\
\\001\000\051\000\082\002\053\000\164\000\059\000\082\002\074\000\082\002\000\000\
\\001\000\051\000\153\002\057\000\153\002\000\000\
\\001\000\051\000\191\002\055\000\191\002\000\000\
\\001\000\051\000\021\001\056\000\225\001\000\000\
\\001\000\051\000\021\001\056\000\227\001\000\000\
\\001\000\051\000\021\001\056\000\252\001\000\000\
\\001\000\051\000\021\001\056\000\254\001\000\000\
\\001\000\051\000\021\001\056\000\001\002\000\000\
\\001\000\051\000\021\001\056\000\002\002\000\000\
\\001\000\051\000\021\001\056\000\008\002\000\000\
\\001\000\051\000\048\001\059\000\047\001\000\000\
\\001\000\051\000\049\001\000\000\
\\001\000\051\000\058\001\057\000\152\002\000\000\
\\001\000\051\000\058\001\057\000\057\001\000\000\
\\001\000\051\000\123\001\055\000\190\002\000\000\
\\001\000\051\000\123\001\055\000\122\001\000\000\
\\001\000\051\000\129\001\000\000\
\\001\000\051\000\129\001\055\000\021\002\000\000\
\\001\000\051\000\161\001\053\000\164\000\055\000\198\002\000\000\
\\001\000\051\000\161\001\053\000\164\000\055\000\160\001\000\000\
\\001\000\051\000\164\001\055\000\202\002\000\000\
\\001\000\051\000\164\001\055\000\163\001\000\000\
\\001\000\052\000\174\001\000\000\
\\001\000\052\000\184\001\000\000\
\\001\000\053\000\081\000\074\000\080\000\000\000\
\\001\000\053\000\164\000\055\000\139\002\000\000\
\\001\000\053\000\164\000\074\000\033\002\000\000\
\\001\000\053\000\164\000\074\000\206\002\000\000\
\\001\000\054\000\209\000\000\000\
\\001\000\054\000\009\001\000\000\
\\001\000\054\000\014\001\000\000\
\\001\000\054\000\118\001\000\000\
\\001\000\054\000\119\001\000\000\
\\001\000\055\000\019\002\000\000\
\\001\000\055\000\020\002\000\000\
\\001\000\055\000\135\002\000\000\
\\001\000\055\000\136\002\000\000\
\\001\000\055\000\137\002\000\000\
\\001\000\055\000\138\002\000\000\
\\001\000\055\000\189\002\000\000\
\\001\000\055\000\197\002\000\000\
\\001\000\055\000\201\002\000\000\
\\001\000\055\000\093\001\000\000\
\\001\000\055\000\107\001\000\000\
\\001\000\055\000\130\001\000\000\
\\001\000\055\000\145\001\000\000\
\\001\000\055\000\176\001\000\000\
\\001\000\055\000\178\001\000\000\
\\001\000\056\000\209\001\000\000\
\\001\000\056\000\211\001\000\000\
\\001\000\056\000\213\001\000\000\
\\001\000\056\000\224\001\000\000\
\\001\000\056\000\226\001\000\000\
\\001\000\056\000\247\001\000\000\
\\001\000\056\000\249\001\000\000\
\\001\000\056\000\251\001\000\000\
\\001\000\056\000\253\001\000\000\
\\001\000\056\000\255\001\000\000\
\\001\000\056\000\000\002\000\000\
\\001\000\056\000\007\002\000\000\
\\001\000\056\000\037\000\000\000\
\\001\000\056\000\038\000\000\000\
\\001\000\056\000\176\000\000\000\
\\001\000\056\000\177\000\000\000\
\\001\000\056\000\181\000\000\000\
\\001\000\056\000\182\000\000\000\
\\001\000\056\000\062\001\000\000\
\\001\000\056\000\137\001\000\000\
\\001\000\057\000\199\001\000\000\
\\001\000\057\000\215\001\000\000\
\\001\000\057\000\217\001\000\000\
\\001\000\057\000\245\001\000\000\
\\001\000\057\000\131\002\000\000\
\\001\000\057\000\140\002\000\000\
\\001\000\057\000\151\002\000\000\
\\001\000\057\000\173\002\000\000\
\\001\000\057\000\187\000\000\000\
\\001\000\057\000\202\000\000\000\
\\001\000\057\000\051\001\000\000\
\\001\000\057\000\053\001\000\000\
\\001\000\057\000\059\001\000\000\
\\001\000\057\000\111\001\000\000\
\\001\000\057\000\115\001\000\000\
\\001\000\057\000\141\001\000\000\
\\001\000\057\000\173\001\000\000\
\\001\000\058\000\172\000\000\000\
\\001\000\058\000\175\000\000\000\
\\001\000\059\000\033\001\000\000\
\\001\000\059\000\046\001\000\000\
\\001\000\059\000\138\001\000\000\
\\001\000\059\000\139\001\000\000\
\\001\000\060\000\004\001\000\000\
\\001\000\071\000\096\001\000\000\
\\001\000\074\000\025\002\000\000\
\\001\000\074\000\026\002\000\000\
\\001\000\074\000\027\002\000\000\
\\001\000\074\000\028\002\000\000\
\\001\000\074\000\029\002\000\000\
\\001\000\074\000\030\002\000\000\
\\001\000\074\000\031\002\000\000\
\\001\000\074\000\032\002\000\000\
\\001\000\074\000\034\002\000\000\
\\001\000\074\000\184\002\000\000\
\\001\000\074\000\185\002\000\000\
\\001\000\074\000\203\002\000\000\
\\001\000\074\000\204\002\000\000\
\\001\000\074\000\205\002\000\000\
\\001\000\074\000\208\002\000\000\
\\001\000\074\000\047\000\000\000\
\\001\000\074\000\048\000\000\000\
\\001\000\074\000\100\000\000\000\
\\001\000\074\000\102\000\000\000\
\\001\000\074\000\103\000\000\000\
\\001\000\074\000\105\000\000\000\
\\001\000\074\000\106\000\000\000\
\\001\000\074\000\107\000\000\000\
\\001\000\074\000\163\000\000\000\
\\001\000\074\000\165\000\000\000\
\\001\000\074\000\167\000\000\000\
\\001\000\074\000\170\000\000\000\
\\001\000\074\000\178\000\000\000\
\\001\000\074\000\183\000\000\000\
\\001\000\074\000\184\000\000\000\
\\001\000\074\000\185\000\000\000\
\\001\000\074\000\186\000\000\000\
\\001\000\074\000\188\000\000\000\
\\001\000\074\000\199\000\000\000\
\\001\000\074\000\214\000\000\000\
\\001\000\074\000\254\000\000\000\
\\001\000\074\000\010\001\000\000\
\\001\000\084\000\000\000\000\000\
\\001\000\084\000\189\001\000\000\
\\001\000\084\000\190\001\000\000\
\\001\000\084\000\191\001\000\000\
\\001\000\084\000\192\001\000\000\
\"
val actionRowNumbers =
"\009\000\064\001\154\000\152\000\
\\151\000\150\000\108\000\107\000\
\\106\000\105\000\065\001\099\000\
\\098\000\239\000\240\000\241\000\
\\242\000\243\000\244\000\010\000\
\\135\001\136\001\112\001\113\001\
\\045\000\114\001\115\001\116\001\
\\075\000\117\001\118\001\119\001\
\\096\000\050\000\076\000\034\000\
\\037\000\006\000\005\000\004\000\
\\003\000\002\000\001\000\138\001\
\\137\001\041\000\094\000\197\000\
\\196\000\195\000\192\000\191\000\
\\190\000\189\000\188\000\172\000\
\\169\000\168\000\167\000\166\000\
\\159\000\158\000\157\000\156\000\
\\175\000\174\000\173\000\149\000\
\\165\000\171\000\170\000\160\000\
\\164\000\163\000\162\000\161\000\
\\120\001\004\001\080\000\121\001\
\\216\000\201\000\237\000\122\001\
\\077\000\123\001\214\000\193\000\
\\089\001\203\000\205\000\065\000\
\\185\000\090\001\186\000\200\000\
\\202\000\204\000\238\000\153\000\
\\182\000\067\001\124\001\104\000\
\\068\001\069\001\125\001\105\001\
\\104\001\103\001\102\001\101\001\
\\100\001\099\001\098\001\097\001\
\\126\001\030\001\111\001\127\001\
\\128\001\080\001\129\001\047\000\
\\108\001\110\001\109\001\106\001\
\\018\000\017\000\033\000\031\001\
\\245\000\246\000\016\000\247\000\
\\248\000\249\000\115\000\107\001\
\\049\000\045\000\045\000\029\000\
\\130\001\048\000\035\000\081\001\
\\101\000\089\000\058\001\109\000\
\\085\000\095\000\028\001\032\001\
\\184\000\181\000\177\000\180\000\
\\155\000\183\000\131\001\081\000\
\\069\000\093\000\198\000\079\000\
\\066\001\069\000\046\000\194\000\
\\187\000\069\000\045\000\007\000\
\\103\000\054\001\028\001\132\001\
\\044\000\088\000\095\001\087\000\
\\102\000\114\000\033\001\133\001\
\\075\001\015\000\014\000\013\000\
\\012\000\011\000\048\000\120\001\
\\120\001\034\001\115\001\073\001\
\\100\000\090\000\028\001\028\001\
\\028\001\001\001\013\001\051\000\
\\176\000\120\001\218\000\069\000\
\\082\000\091\001\146\000\145\000\
\\144\000\143\000\142\000\141\000\
\\140\000\139\000\137\000\135\000\
\\070\000\130\000\127\000\124\000\
\\122\000\120\000\118\000\117\000\
\\003\001\136\000\068\000\067\000\
\\066\000\069\000\147\000\148\000\
\\199\000\092\001\014\001\015\001\
\\042\000\082\001\120\001\083\001\
\\008\000\053\001\008\001\017\001\
\\005\001\084\001\043\000\229\000\
\\057\001\086\000\069\000\070\001\
\\038\000\052\001\062\000\072\000\
\\033\001\115\001\250\000\251\000\
\\074\000\225\000\028\001\084\000\
\\012\001\091\000\063\001\028\001\
\\046\001\042\001\041\001\040\001\
\\039\001\029\001\078\000\179\000\
\\217\000\220\000\096\001\215\000\
\\134\000\069\000\069\000\069\000\
\\069\000\069\000\069\000\069\000\
\\069\000\069\000\069\000\047\001\
\\213\000\212\000\069\000\069\000\
\\076\001\206\000\252\000\097\000\
\\072\001\056\001\085\001\210\000\
\\132\001\228\000\079\001\116\000\
\\039\000\086\001\036\000\113\000\
\\233\000\064\000\035\001\036\001\
\\048\000\019\001\058\000\031\000\
\\032\000\030\000\061\000\223\000\
\\019\000\020\000\048\000\020\001\
\\048\001\253\000\023\000\224\000\
\\115\001\011\001\083\000\062\001\
\\092\000\028\001\007\001\071\001\
\\178\000\219\000\221\000\132\000\
\\131\000\133\000\128\000\129\000\
\\125\000\126\000\123\000\121\000\
\\119\000\138\000\093\001\094\001\
\\024\000\209\000\016\001\087\001\
\\111\000\112\000\074\001\232\000\
\\028\001\000\000\115\001\049\001\
\\057\000\071\000\231\000\063\000\
\\222\000\115\001\037\001\073\000\
\\254\000\022\000\227\000\061\001\
\\028\001\010\001\055\001\054\000\
\\211\000\236\000\078\001\110\000\
\\023\001\025\001\006\001\056\000\
\\018\001\230\000\002\001\021\001\
\\021\000\226\000\009\001\060\001\
\\040\000\055\000\088\001\026\001\
\\069\000\050\001\060\000\028\001\
\\051\001\235\000\000\000\043\001\
\\038\001\059\001\045\000\255\000\
\\026\000\120\001\077\001\207\000\
\\028\000\027\001\059\000\022\001\
\\234\000\024\001\000\001\053\000\
\\025\000\208\000\027\000\044\001\
\\045\001\052\000\134\001"
val gotoT =
"\
\\001\000\020\000\002\000\019\000\003\000\018\000\004\000\017\000\
\\005\000\016\000\006\000\015\000\007\000\014\000\008\000\013\000\
\\009\000\012\000\010\000\011\000\011\000\010\000\019\000\009\000\
\\020\000\008\000\021\000\007\000\022\000\006\000\066\000\005\000\
\\067\000\004\000\068\000\003\000\069\000\002\000\106\000\001\000\
\\109\000\186\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\043\000\002\000\019\000\003\000\018\000\004\000\017\000\
\\005\000\016\000\006\000\015\000\007\000\014\000\008\000\013\000\
\\009\000\012\000\010\000\011\000\011\000\010\000\019\000\009\000\
\\020\000\008\000\021\000\007\000\022\000\006\000\066\000\005\000\
\\067\000\004\000\068\000\003\000\069\000\002\000\106\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\077\000\023\000\076\000\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\070\000\
\\043\000\069\000\045\000\068\000\065\000\067\000\066\000\066\000\
\\067\000\065\000\068\000\064\000\070\000\063\000\071\000\062\000\
\\072\000\061\000\073\000\060\000\074\000\059\000\075\000\058\000\
\\076\000\057\000\077\000\056\000\078\000\055\000\082\000\054\000\
\\083\000\053\000\084\000\052\000\085\000\051\000\086\000\050\000\
\\087\000\049\000\088\000\048\000\089\000\047\000\000\000\
\\000\000\
\\034\000\099\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\117\000\035\000\116\000\037\000\115\000\038\000\114\000\
\\039\000\113\000\040\000\112\000\041\000\111\000\042\000\110\000\
\\043\000\109\000\044\000\108\000\045\000\107\000\082\000\054\000\
\\083\000\053\000\084\000\052\000\085\000\051\000\086\000\050\000\
\\087\000\049\000\088\000\048\000\089\000\047\000\000\000\
\\000\000\
\\003\000\137\000\004\000\136\000\005\000\135\000\014\000\134\000\
\\015\000\133\000\016\000\132\000\018\000\131\000\026\000\130\000\
\\027\000\129\000\028\000\128\000\033\000\127\000\037\000\075\000\
\\038\000\074\000\039\000\073\000\040\000\072\000\041\000\071\000\
\\042\000\126\000\043\000\125\000\045\000\068\000\066\000\005\000\
\\067\000\004\000\068\000\003\000\069\000\002\000\072\000\124\000\
\\074\000\059\000\075\000\058\000\076\000\057\000\082\000\054\000\
\\083\000\053\000\084\000\052\000\085\000\051\000\086\000\050\000\
\\087\000\049\000\088\000\048\000\089\000\047\000\099\000\123\000\
\\100\000\122\000\111\000\121\000\000\000\
\\003\000\137\000\004\000\136\000\005\000\135\000\012\000\147\000\
\\014\000\146\000\015\000\133\000\016\000\132\000\018\000\131\000\
\\033\000\127\000\037\000\075\000\038\000\074\000\039\000\073\000\
\\040\000\072\000\041\000\071\000\042\000\126\000\043\000\125\000\
\\045\000\068\000\066\000\005\000\067\000\004\000\068\000\003\000\
\\069\000\002\000\072\000\124\000\074\000\059\000\075\000\058\000\
\\076\000\057\000\082\000\054\000\083\000\053\000\084\000\052\000\
\\085\000\051\000\086\000\050\000\087\000\049\000\088\000\048\000\
\\089\000\047\000\099\000\123\000\100\000\122\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\152\000\023\000\151\000\024\000\150\000\025\000\149\000\
\\037\000\075\000\038\000\074\000\039\000\073\000\040\000\072\000\
\\041\000\071\000\042\000\070\000\043\000\069\000\045\000\068\000\
\\066\000\066\000\067\000\065\000\068\000\064\000\070\000\063\000\
\\071\000\062\000\072\000\061\000\073\000\060\000\074\000\059\000\
\\075\000\058\000\076\000\057\000\077\000\056\000\078\000\055\000\
\\082\000\054\000\083\000\053\000\084\000\052\000\085\000\051\000\
\\086\000\050\000\087\000\049\000\088\000\048\000\089\000\047\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\029\000\160\000\034\000\159\000\079\000\158\000\080\000\157\000\
\\081\000\156\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\177\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\131\000\033\000\127\000\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\126\000\
\\043\000\125\000\045\000\068\000\072\000\124\000\074\000\059\000\
\\075\000\058\000\076\000\057\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\100\000\187\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\137\000\004\000\136\000\005\000\135\000\014\000\134\000\
\\015\000\133\000\016\000\132\000\018\000\131\000\026\000\130\000\
\\027\000\129\000\028\000\128\000\033\000\127\000\037\000\075\000\
\\038\000\074\000\039\000\073\000\040\000\072\000\041\000\071\000\
\\042\000\126\000\043\000\125\000\045\000\068\000\066\000\005\000\
\\067\000\004\000\068\000\003\000\069\000\002\000\072\000\124\000\
\\074\000\059\000\075\000\058\000\076\000\057\000\082\000\054\000\
\\083\000\053\000\084\000\052\000\085\000\051\000\086\000\050\000\
\\087\000\049\000\088\000\048\000\089\000\047\000\099\000\123\000\
\\100\000\122\000\111\000\188\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\077\000\023\000\195\000\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\070\000\
\\043\000\069\000\045\000\068\000\066\000\066\000\067\000\065\000\
\\068\000\064\000\070\000\063\000\071\000\062\000\072\000\061\000\
\\073\000\060\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\077\000\056\000\078\000\055\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\000\000\
\\018\000\077\000\023\000\196\000\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\070\000\
\\043\000\069\000\045\000\068\000\066\000\066\000\067\000\065\000\
\\068\000\064\000\070\000\063\000\071\000\062\000\072\000\061\000\
\\073\000\060\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\077\000\056\000\078\000\055\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\000\000\
\\000\000\
\\000\000\
\\018\000\131\000\033\000\198\000\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\126\000\
\\043\000\125\000\045\000\068\000\072\000\124\000\074\000\059\000\
\\075\000\058\000\076\000\057\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\000\000\
\\003\000\137\000\004\000\136\000\005\000\135\000\012\000\199\000\
\\014\000\146\000\015\000\133\000\016\000\132\000\018\000\131\000\
\\033\000\127\000\037\000\075\000\038\000\074\000\039\000\073\000\
\\040\000\072\000\041\000\071\000\042\000\126\000\043\000\125\000\
\\045\000\068\000\066\000\005\000\067\000\004\000\068\000\003\000\
\\069\000\002\000\072\000\124\000\074\000\059\000\075\000\058\000\
\\076\000\057\000\082\000\054\000\083\000\053\000\084\000\052\000\
\\085\000\051\000\086\000\050\000\087\000\049\000\088\000\048\000\
\\089\000\047\000\099\000\123\000\100\000\122\000\000\000\
\\000\000\
\\000\000\
\\112\000\201\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\206\000\018\000\205\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\114\000\208\000\000\000\
\\000\000\
\\000\000\
\\098\000\210\000\000\000\
\\000\000\
\\000\000\
\\018\000\233\000\036\000\232\000\046\000\231\000\047\000\230\000\
\\048\000\229\000\049\000\228\000\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\
\\064\000\213\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\233\000\036\000\232\000\046\000\231\000\047\000\230\000\
\\048\000\229\000\049\000\228\000\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\
\\064\000\241\000\000\000\
\\018\000\077\000\037\000\075\000\038\000\074\000\039\000\073\000\
\\040\000\072\000\041\000\071\000\042\000\070\000\043\000\069\000\
\\045\000\068\000\070\000\242\000\072\000\061\000\073\000\060\000\
\\074\000\059\000\075\000\058\000\076\000\057\000\077\000\056\000\
\\078\000\055\000\082\000\054\000\083\000\053\000\084\000\052\000\
\\085\000\051\000\086\000\050\000\087\000\049\000\088\000\048\000\
\\089\000\047\000\000\000\
\\000\000\
\\000\000\
\\018\000\233\000\036\000\232\000\046\000\231\000\047\000\230\000\
\\048\000\229\000\049\000\228\000\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\
\\064\000\243\000\000\000\
\\018\000\077\000\023\000\246\000\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\070\000\
\\043\000\069\000\045\000\068\000\066\000\066\000\067\000\065\000\
\\068\000\064\000\070\000\063\000\071\000\062\000\072\000\061\000\
\\073\000\060\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\077\000\056\000\078\000\055\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\090\000\245\000\091\000\244\000\000\000\
\\002\000\248\000\003\000\018\000\004\000\017\000\005\000\016\000\
\\006\000\015\000\007\000\014\000\008\000\013\000\009\000\012\000\
\\010\000\011\000\011\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\066\000\005\000\067\000\004\000\
\\068\000\003\000\069\000\002\000\106\000\001\000\107\000\247\000\000\000\
\\013\000\249\000\000\000\
\\000\000\
\\017\000\250\000\018\000\205\000\000\000\
\\097\000\251\000\000\000\
\\018\000\077\000\023\000\246\000\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\070\000\
\\043\000\069\000\045\000\068\000\066\000\066\000\067\000\065\000\
\\068\000\064\000\070\000\063\000\071\000\062\000\072\000\061\000\
\\073\000\060\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\077\000\056\000\078\000\055\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\091\000\254\000\117\000\253\000\000\000\
\\018\000\001\001\024\000\000\001\025\000\149\000\000\000\
\\000\000\
\\018\000\001\001\024\000\003\001\025\000\149\000\000\000\
\\013\000\005\001\000\000\
\\000\000\
\\101\000\006\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\131\000\033\000\009\001\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\126\000\
\\043\000\125\000\045\000\068\000\072\000\124\000\074\000\059\000\
\\075\000\058\000\076\000\057\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\000\000\
\\029\000\010\001\034\000\159\000\079\000\158\000\080\000\157\000\
\\081\000\156\000\000\000\
\\029\000\011\001\034\000\159\000\079\000\158\000\080\000\157\000\
\\081\000\156\000\000\000\
\\000\000\
\\034\000\013\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\001\001\025\000\015\001\000\000\
\\017\000\016\001\018\000\205\000\000\000\
\\018\000\001\001\025\000\017\001\000\000\
\\000\000\
\\108\000\018\001\000\000\
\\018\000\025\001\037\000\024\001\038\000\023\001\040\000\022\001\
\\068\000\021\001\082\000\054\000\083\000\053\000\084\000\052\000\
\\085\000\051\000\086\000\050\000\087\000\049\000\088\000\048\000\
\\089\000\047\000\092\000\020\001\000\000\
\\000\000\
\\034\000\159\000\079\000\027\001\080\000\157\000\081\000\156\000\000\000\
\\098\000\029\001\118\000\028\001\000\000\
\\018\000\233\000\036\000\232\000\046\000\231\000\047\000\230\000\
\\048\000\229\000\049\000\228\000\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\
\\064\000\030\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\233\000\054\000\032\001\055\000\222\000\056\000\221\000\
\\057\000\220\000\058\000\219\000\059\000\218\000\060\000\217\000\
\\061\000\216\000\062\000\215\000\063\000\214\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\233\000\036\000\043\001\046\000\231\000\047\000\230\000\
\\048\000\229\000\049\000\228\000\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\077\000\023\000\246\000\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\070\000\
\\043\000\069\000\045\000\068\000\066\000\066\000\067\000\065\000\
\\068\000\064\000\070\000\063\000\071\000\062\000\072\000\061\000\
\\073\000\060\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\077\000\056\000\078\000\055\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\090\000\048\001\091\000\244\000\000\000\
\\000\000\
\\029\000\050\001\034\000\159\000\079\000\158\000\080\000\157\000\
\\081\000\156\000\000\000\
\\000\000\
\\002\000\248\000\003\000\018\000\004\000\017\000\005\000\016\000\
\\006\000\015\000\007\000\014\000\008\000\013\000\009\000\012\000\
\\010\000\011\000\011\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\022\000\006\000\066\000\005\000\067\000\004\000\
\\068\000\003\000\069\000\002\000\106\000\001\000\107\000\052\001\000\000\
\\000\000\
\\108\000\053\001\000\000\
\\116\000\054\001\000\000\
\\000\000\
\\000\000\
\\018\000\077\000\023\000\246\000\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\070\000\
\\043\000\069\000\045\000\068\000\066\000\066\000\067\000\065\000\
\\068\000\064\000\070\000\063\000\071\000\062\000\072\000\061\000\
\\073\000\060\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\077\000\056\000\078\000\055\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\091\000\254\000\117\000\058\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\233\000\036\000\059\001\046\000\231\000\047\000\230\000\
\\048\000\229\000\049\000\228\000\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\000\000\
\\000\000\
\\003\000\137\000\004\000\136\000\005\000\135\000\014\000\062\001\
\\015\000\133\000\016\000\132\000\018\000\131\000\033\000\127\000\
\\037\000\075\000\038\000\074\000\039\000\073\000\040\000\072\000\
\\041\000\071\000\042\000\126\000\043\000\125\000\045\000\068\000\
\\066\000\005\000\067\000\004\000\068\000\003\000\069\000\002\000\
\\072\000\124\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\082\000\054\000\083\000\053\000\084\000\052\000\085\000\051\000\
\\086\000\050\000\087\000\049\000\088\000\048\000\089\000\047\000\
\\099\000\123\000\100\000\122\000\110\000\061\001\000\000\
\\000\000\
\\102\000\065\001\103\000\064\001\000\000\
\\104\000\069\001\105\000\068\001\000\000\
\\101\000\074\001\000\000\
\\034\000\075\001\000\000\
\\000\000\
\\000\000\
\\030\000\080\001\031\000\079\001\032\000\078\001\000\000\
\\119\000\083\001\000\000\
\\017\000\085\001\018\000\205\000\000\000\
\\112\000\086\001\000\000\
\\108\000\087\001\000\000\
\\112\000\088\001\000\000\
\\000\000\
\\017\000\090\001\018\000\205\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\114\000\092\001\000\000\
\\000\000\
\\098\000\029\001\118\000\093\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\233\000\052\000\095\001\053\000\224\000\054\000\223\000\
\\055\000\222\000\056\000\221\000\057\000\220\000\058\000\219\000\
\\059\000\218\000\060\000\217\000\061\000\216\000\062\000\215\000\
\\063\000\214\000\000\000\
\\018\000\233\000\052\000\096\001\053\000\224\000\054\000\223\000\
\\055\000\222\000\056\000\221\000\057\000\220\000\058\000\219\000\
\\059\000\218\000\060\000\217\000\061\000\216\000\062\000\215\000\
\\063\000\214\000\000\000\
\\018\000\233\000\052\000\097\001\053\000\224\000\054\000\223\000\
\\055\000\222\000\056\000\221\000\057\000\220\000\058\000\219\000\
\\059\000\218\000\060\000\217\000\061\000\216\000\062\000\215\000\
\\063\000\214\000\000\000\
\\018\000\233\000\051\000\098\001\052\000\225\000\053\000\224\000\
\\054\000\223\000\055\000\222\000\056\000\221\000\057\000\220\000\
\\058\000\219\000\059\000\218\000\060\000\217\000\061\000\216\000\
\\062\000\215\000\063\000\214\000\000\000\
\\018\000\233\000\051\000\099\001\052\000\225\000\053\000\224\000\
\\054\000\223\000\055\000\222\000\056\000\221\000\057\000\220\000\
\\058\000\219\000\059\000\218\000\060\000\217\000\061\000\216\000\
\\062\000\215\000\063\000\214\000\000\000\
\\018\000\233\000\050\000\100\001\051\000\226\000\052\000\225\000\
\\053\000\224\000\054\000\223\000\055\000\222\000\056\000\221\000\
\\057\000\220\000\058\000\219\000\059\000\218\000\060\000\217\000\
\\061\000\216\000\062\000\215\000\063\000\214\000\000\000\
\\018\000\233\000\050\000\101\001\051\000\226\000\052\000\225\000\
\\053\000\224\000\054\000\223\000\055\000\222\000\056\000\221\000\
\\057\000\220\000\058\000\219\000\059\000\218\000\060\000\217\000\
\\061\000\216\000\062\000\215\000\063\000\214\000\000\000\
\\018\000\233\000\049\000\102\001\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\000\000\
\\018\000\233\000\048\000\103\001\049\000\228\000\050\000\227\000\
\\051\000\226\000\052\000\225\000\053\000\224\000\054\000\223\000\
\\055\000\222\000\056\000\221\000\057\000\220\000\058\000\219\000\
\\059\000\218\000\060\000\217\000\061\000\216\000\062\000\215\000\
\\063\000\214\000\000\000\
\\018\000\233\000\047\000\104\001\048\000\229\000\049\000\228\000\
\\050\000\227\000\051\000\226\000\052\000\225\000\053\000\224\000\
\\054\000\223\000\055\000\222\000\056\000\221\000\057\000\220\000\
\\058\000\219\000\059\000\218\000\060\000\217\000\061\000\216\000\
\\062\000\215\000\063\000\214\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\233\000\036\000\232\000\046\000\231\000\047\000\230\000\
\\048\000\229\000\049\000\228\000\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\
\\064\000\106\001\000\000\
\\018\000\233\000\036\000\232\000\046\000\231\000\047\000\230\000\
\\048\000\229\000\049\000\228\000\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\
\\064\000\107\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\097\000\110\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\137\000\004\000\136\000\005\000\135\000\014\000\062\001\
\\015\000\133\000\016\000\132\000\018\000\131\000\033\000\127\000\
\\037\000\075\000\038\000\074\000\039\000\073\000\040\000\072\000\
\\041\000\071\000\042\000\126\000\043\000\125\000\045\000\068\000\
\\066\000\005\000\067\000\004\000\068\000\003\000\069\000\002\000\
\\072\000\124\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\082\000\054\000\083\000\053\000\084\000\052\000\085\000\051\000\
\\086\000\050\000\087\000\049\000\088\000\048\000\089\000\047\000\
\\099\000\123\000\100\000\122\000\110\000\111\001\000\000\
\\000\000\
\\003\000\137\000\004\000\136\000\005\000\135\000\014\000\062\001\
\\015\000\133\000\016\000\132\000\018\000\131\000\033\000\127\000\
\\037\000\075\000\038\000\074\000\039\000\073\000\040\000\072\000\
\\041\000\071\000\042\000\126\000\043\000\125\000\045\000\068\000\
\\066\000\005\000\067\000\004\000\068\000\003\000\069\000\002\000\
\\072\000\124\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\082\000\054\000\083\000\053\000\084\000\052\000\085\000\051\000\
\\086\000\050\000\087\000\049\000\088\000\048\000\089\000\047\000\
\\099\000\123\000\100\000\122\000\110\000\114\001\000\000\
\\000\000\
\\000\000\
\\103\000\115\001\000\000\
\\000\000\
\\000\000\
\\018\000\131\000\033\000\118\001\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\126\000\
\\043\000\125\000\045\000\068\000\072\000\124\000\074\000\059\000\
\\075\000\058\000\076\000\057\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\000\000\
\\120\000\119\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\102\000\123\001\103\000\122\001\000\000\
\\119\000\124\001\000\000\
\\000\000\
\\000\000\
\\018\000\131\000\033\000\125\001\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\126\000\
\\043\000\125\000\045\000\068\000\072\000\124\000\074\000\059\000\
\\075\000\058\000\076\000\057\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\000\000\
\\113\000\126\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\034\000\130\001\000\000\
\\108\000\131\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\133\001\018\000\205\000\000\000\
\\108\000\134\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\116\000\138\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\140\001\000\000\
\\057\000\141\001\000\000\
\\034\000\142\001\000\000\
\\000\000\
\\000\000\
\\104\000\144\001\105\000\068\001\000\000\
\\000\000\
\\103\000\145\001\000\000\
\\000\000\
\\034\000\146\001\000\000\
\\000\000\
\\031\000\147\001\032\000\078\001\000\000\
\\000\000\
\\000\000\
\\119\000\149\001\000\000\
\\000\000\
\\017\000\150\001\018\000\205\000\000\000\
\\108\000\151\001\000\000\
\\000\000\
\\093\000\154\001\094\000\153\001\095\000\152\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\121\000\157\001\000\000\
\\122\000\160\001\000\000\
\\000\000\
\\000\000\
\\120\000\163\001\000\000\
\\000\000\
\\000\000\
\\113\000\164\001\000\000\
\\000\000\
\\000\000\
\\108\000\165\001\000\000\
\\000\000\
\\018\000\077\000\023\000\169\001\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\070\000\
\\043\000\069\000\045\000\068\000\066\000\066\000\067\000\065\000\
\\068\000\064\000\070\000\063\000\071\000\062\000\072\000\061\000\
\\073\000\060\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\077\000\056\000\078\000\055\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\095\000\168\001\096\000\167\001\
\\115\000\166\001\000\000\
\\093\000\170\001\094\000\153\001\095\000\152\001\000\000\
\\000\000\
\\000\000\
\\018\000\233\000\036\000\173\001\046\000\231\000\047\000\230\000\
\\048\000\229\000\049\000\228\000\050\000\227\000\051\000\226\000\
\\052\000\225\000\053\000\224\000\054\000\223\000\055\000\222\000\
\\056\000\221\000\057\000\220\000\058\000\219\000\059\000\218\000\
\\060\000\217\000\061\000\216\000\062\000\215\000\063\000\214\000\000\000\
\\000\000\
\\000\000\
\\018\000\175\001\000\000\
\\000\000\
\\000\000\
\\057\000\177\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\077\000\023\000\169\001\037\000\075\000\038\000\074\000\
\\039\000\073\000\040\000\072\000\041\000\071\000\042\000\070\000\
\\043\000\069\000\045\000\068\000\066\000\066\000\067\000\065\000\
\\068\000\064\000\070\000\063\000\071\000\062\000\072\000\061\000\
\\073\000\060\000\074\000\059\000\075\000\058\000\076\000\057\000\
\\077\000\056\000\078\000\055\000\082\000\054\000\083\000\053\000\
\\084\000\052\000\085\000\051\000\086\000\050\000\087\000\049\000\
\\088\000\048\000\089\000\047\000\096\000\178\001\000\000\
\\000\000\
\\095\000\168\001\115\000\180\001\000\000\
\\034\000\159\000\079\000\181\001\080\000\157\000\081\000\156\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\121\000\183\001\000\000\
\\000\000\
\\122\000\184\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 443
val numrules = 279
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit | YINTEGER of  (int option)
 | YID of  (string) | mo_param_dcl of  (AST.exp list)
 | mo_simple_declarator of  (AST.dec list)
 | mo_member of  (AST.exp list) | mo_declarator of  (AST.dec list)
 | mo_export of  (AST.exp list) | idl_file of  (AST.file)
 | mo_interface_names of  (AST.exp list) | defs of  (AST.exp list)
 | param_attribute of  (AST.attrib) | param_dcl of  (AST.exp)
 | parameter_dcls of  (AST.exp list) | op_type_spec of  (AST.ty)
 | switch_type_spec of  (AST.ty) | member of  (AST.exp)
 | unsigned_longlong_int of  (AST.ty) | unsigned_long_int of  (AST.ty)
 | unsigned_short_int of  (AST.ty) | signed_longlong_int of  (AST.ty)
 | signed_long_int of  (AST.ty) | signed_short_int of  (AST.ty)
 | unsigned_int of  (AST.ty) | signed_int of  (AST.ty)
 | array_declarator of  (AST.dec) | complex_declarator of  (AST.dec)
 | declarator of  (AST.dec) | fixed_pt_type of  (AST.ty)
 | sequence_type of  (AST.ty) | value_base_type of  (AST.ty)
 | object_type of  (AST.ty) | any_type of  (AST.ty)
 | template_type_spec of  (AST.ty) | base_type_spec of  (AST.ty)
 | constr_type_spec of  (AST.ty) | simple_type_spec of  (AST.ty)
 | enum_type of  (AST.ty) | union_type of  (AST.ty)
 | struct_type of  (AST.ty) | type_declarator of  (AST.exp)
 | positive_int_const of  (AST.exp)
 | wide_character_literal of  (string)
 | character_literal of  (string) | octet_type of  (AST.ty)
 | fixed_pt_const_type of  (AST.ty) | wide_string_type of  (AST.ty)
 | string_type of  (AST.ty) | floating_pt_type of  (AST.ty)
 | boolean_type of  (AST.ty) | wide_char_type of  (AST.ty)
 | char_type of  (AST.ty) | integer_type of  (AST.ty)
 | const_exp of  (AST.exp) | const_type of  (AST.ty)
 | simple_declarator of  (AST.dec) | param_type_spec of  (AST.ty)
 | declarators of  (AST.dec list) | type_spec of  (AST.ty)
 | value_dcl of  (AST.exp) | scoped_name of  (AST.exp)
 | interface_name of  (AST.exp) | op_dcl of  (AST.exp)
 | attr_dcl of  (AST.exp) | export of  (AST.exp)
 | interface_inheritance_spec of  (AST.exp list)
 | interface_body of  (AST.exp list) | interface_header of  (AST.exp)
 | forward_dcl of  (AST.exp) | interface_dcl of  (AST.exp)
 | value of  (AST.exp) | module of  (AST.exp)
 | interface of  (AST.exp) | except_dcl of  (AST.exp)
 | const_dcl of  (AST.exp) | type_dcl of  (AST.exp)
 | definition of  (AST.exp) | specification of  (AST.exp list)
end
type svalue = MlyValue.svalue
type result = AST.file
end
structure EC=
struct
open LrTable
val is_keyword =
fn (T 0) => true | (T 1) => true | (T 2) => true | (T 3) => true | (T 
4) => true | (T 5) => true | (T 6) => true | (T 7) => true | (T 8)
 => true | (T 9) => true | (T 10) => true | (T 11) => true | (T 12)
 => true | (T 13) => true | (T 14) => true | (T 15) => true | (T 16)
 => true | (T 17) => true | (T 18) => true | (T 19) => true | (T 20)
 => true | (T 21) => true | (T 22) => true | (T 23) => true | (T 24)
 => true | (T 25) => true | (T 26) => true | (T 27) => true | (T 28)
 => true | (T 29) => true | (T 30) => true | (T 31) => true | (T 32)
 => true | (T 33) => true | (T 34) => true | (T 35) => true | (T 36)
 => true | (T 37) => true | (T 38) => true | (T 39) => true | (T 40)
 => true | (T 41) => true | (T 42) => true | (T 43) => true | (T 44)
 => true | (T 45) => true | (T 46) => true | (T 47) => true | _ => false
val preferred_change = 
nil
val noShift = 
fn (T 83) => true | _ => false
val showTerminal =
fn (T 0) => "YABSTRACT"
  | (T 1) => "YANY"
  | (T 2) => "YATTRIBUTE"
  | (T 3) => "YBOOLEAN"
  | (T 4) => "YCASE"
  | (T 5) => "YCHAR"
  | (T 6) => "YCONST"
  | (T 7) => "YCONTEXT"
  | (T 8) => "YCUSTOM"
  | (T 9) => "YDEFAULT"
  | (T 10) => "YDOUBLE"
  | (T 11) => "YEXCEPTION"
  | (T 12) => "YENUM"
  | (T 13) => "YFACTORY"
  | (T 14) => "YFALSE"
  | (T 15) => "YFIXED"
  | (T 16) => "YFLOAT"
  | (T 17) => "YIN"
  | (T 18) => "YINOUT"
  | (T 19) => "YINTERFACE"
  | (T 20) => "YLOCAL"
  | (T 21) => "YLONG"
  | (T 22) => "YMODULE"
  | (T 23) => "YNATIVE"
  | (T 24) => "YOBJECT"
  | (T 25) => "YOCTET"
  | (T 26) => "YONEWAY"
  | (T 27) => "YOUT"
  | (T 28) => "YPRIVATE"
  | (T 29) => "YPUBLIC"
  | (T 30) => "YRAISES"
  | (T 31) => "YREADONLY"
  | (T 32) => "YSEQUENCE"
  | (T 33) => "YSHORT"
  | (T 34) => "YSTRING"
  | (T 35) => "YSTRUCT"
  | (T 36) => "YSUPPORTS"
  | (T 37) => "YSWITCH"
  | (T 38) => "YTRUE"
  | (T 39) => "YTRUNCATABLE"
  | (T 40) => "YTYPEDEF"
  | (T 41) => "YUNSIGNED"
  | (T 42) => "YUNION"
  | (T 43) => "YVALUEBASE"
  | (T 44) => "YVALUETYPE"
  | (T 45) => "YVOID"
  | (T 46) => "YWCHAR"
  | (T 47) => "YWSTRING"
  | (T 48) => "YSEMI"
  | (T 49) => "YDOT"
  | (T 50) => "YCOMMA"
  | (T 51) => "YCOLON"
  | (T 52) => "YCOLONCOLON"
  | (T 53) => "YLEFTPAREN"
  | (T 54) => "YRIGHTPAREN"
  | (T 55) => "YLEFTBRACE"
  | (T 56) => "YRIGHTBRACE"
  | (T 57) => "YLEFTANGLE"
  | (T 58) => "YRIGHTANGLE"
  | (T 59) => "YEQUALS"
  | (T 60) => "YVBAR"
  | (T 61) => "YMINUS"
  | (T 62) => "YPLUS"
  | (T 63) => "YTILDE"
  | (T 64) => "YMOD"
  | (T 65) => "YAND"
  | (T 66) => "YCARAT"
  | (T 67) => "YASTERISK"
  | (T 68) => "YFWDSLASH"
  | (T 69) => "YLEFTBRACKET"
  | (T 70) => "YRIGHTBRACKET"
  | (T 71) => "YDBLLEFTANGLE"
  | (T 72) => "YDBLRIGHTANGLE"
  | (T 73) => "YID"
  | (T 74) => "YINTEGER"
  | (T 75) => "YOCTINTEGER"
  | (T 76) => "YHEXINTEGER"
  | (T 77) => "YCHARLITERAL"
  | (T 78) => "YWCHARLITERAL"
  | (T 79) => "YFLOATLITERAL"
  | (T 80) => "YSTRINGLITERAL"
  | (T 81) => "YWSTRINGLITERAL"
  | (T 82) => "YFIXEDPTLITERAL"
  | (T 83) => "EOF"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms = (T 0) :: (T 1) :: (T 2) :: (T 3) :: (T 4) :: (T 5) :: (T 6
) :: (T 7) :: (T 8) :: (T 9) :: (T 10) :: (T 11) :: (T 12) :: (T 13)
 :: (T 14) :: (T 15) :: (T 16) :: (T 17) :: (T 18) :: (T 19) :: (T 20)
 :: (T 21) :: (T 22) :: (T 23) :: (T 24) :: (T 25) :: (T 26) :: (T 27)
 :: (T 28) :: (T 29) :: (T 30) :: (T 31) :: (T 32) :: (T 33) :: (T 34)
 :: (T 35) :: (T 36) :: (T 37) :: (T 38) :: (T 39) :: (T 40) :: (T 41)
 :: (T 42) :: (T 43) :: (T 44) :: (T 45) :: (T 46) :: (T 47) :: (T 48)
 :: (T 49) :: (T 50) :: (T 51) :: (T 52) :: (T 53) :: (T 54) :: (T 55)
 :: (T 56) :: (T 57) :: (T 58) :: (T 59) :: (T 60) :: (T 61) :: (T 62)
 :: (T 63) :: (T 64) :: (T 65) :: (T 66) :: (T 67) :: (T 68) :: (T 69)
 :: (T 70) :: (T 71) :: (T 72) :: (T 75) :: (T 76) :: (T 77) :: (T 78)
 :: (T 79) :: (T 80) :: (T 81) :: (T 82) :: (T 83) :: nil
end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of (0,(_,(MlyValue.specification specification,specification1left,
specification1right))::rest671) => let val result=MlyValue.idl_file((
AST.Spec(specification)))
 in (LrTable.NT 108,(result,specification1left,specification1right),
rest671) end
| (1,(_,(_,EOF1left,EOF1right))::rest671) => let val result=
MlyValue.idl_file((AST.Spec(AST.NilExp :: nil)))
 in (LrTable.NT 108,(result,EOF1left,EOF1right),rest671) end
| (2,(_,(_,_,EOF1right))::(_,(MlyValue.definition definition,
definition1left,_))::rest671) => let val result=MlyValue.specification
((definition :: nil))
 in (LrTable.NT 0,(result,definition1left,EOF1right),rest671) end
| (3,(_,(MlyValue.specification specification,_,specification1right))
::(_,(MlyValue.definition definition,definition1left,_))::rest671) => 
let val result=MlyValue.specification((definition :: specification))
 in (LrTable.NT 0,(result,definition1left,specification1right),rest671
) end
| (4,(_,(_,_,YSEMI1right))::(_,(MlyValue.type_dcl type_dcl,
type_dcl1left,_))::rest671) => let val result=MlyValue.definition((
type_dcl))
 in (LrTable.NT 1,(result,type_dcl1left,YSEMI1right),rest671) end
| (5,(_,(_,_,YSEMI1right))::(_,(MlyValue.const_dcl const_dcl,
const_dcl1left,_))::rest671) => let val result=MlyValue.definition((
const_dcl))
 in (LrTable.NT 1,(result,const_dcl1left,YSEMI1right),rest671) end
| (6,(_,(_,_,YSEMI1right))::(_,(MlyValue.except_dcl except_dcl,
except_dcl1left,_))::rest671) => let val result=MlyValue.definition((
except_dcl))
 in (LrTable.NT 1,(result,except_dcl1left,YSEMI1right),rest671) end
| (7,(_,(_,_,YSEMI1right))::(_,(MlyValue.interface interface,
interface1left,_))::rest671) => let val result=MlyValue.definition((
interface))
 in (LrTable.NT 1,(result,interface1left,YSEMI1right),rest671) end
| (8,(_,(_,_,YSEMI1right))::(_,(MlyValue.module module,module1left,_))
::rest671) => let val result=MlyValue.definition((module))
 in (LrTable.NT 1,(result,module1left,YSEMI1right),rest671) end
| (9,(_,(_,_,YSEMI1right))::(_,(MlyValue.value value,value1left,_))::
rest671) => let val result=MlyValue.definition((value))
 in (LrTable.NT 1,(result,value1left,YSEMI1right),rest671) end
| (10,(_,(MlyValue.defs defs,_,defs1right))::(_,(MlyValue.definition 
definition,definition1left,_))::rest671) => let val result=
MlyValue.defs((definition :: defs ))
 in (LrTable.NT 106,(result,definition1left,defs1right),rest671) end
| (11,(_,(MlyValue.definition definition,definition1left,
definition1right))::rest671) => let val result=MlyValue.defs((
definition :: nil))
 in (LrTable.NT 106,(result,definition1left,definition1right),rest671)
 end
| (12,(_,(_,_,YRIGHTBRACE1right))::(_,(MlyValue.defs defs,_,_))::_::(_
,(MlyValue.YID YID,_,_))::(_,(_,YMODULE1left,_))::rest671) => let val 
result=MlyValue.module((AST.ModuleExp(Symbol.symbol YID, defs)))
 in (LrTable.NT 6,(result,YMODULE1left,YRIGHTBRACE1right),rest671) end
| (13,(_,(MlyValue.interface_dcl interface_dcl,interface_dcl1left,
interface_dcl1right))::rest671) => let val result=MlyValue.interface((
interface_dcl))
 in (LrTable.NT 5,(result,interface_dcl1left,interface_dcl1right),
rest671) end
| (14,(_,(MlyValue.forward_dcl forward_dcl,forward_dcl1left,
forward_dcl1right))::rest671) => let val result=MlyValue.interface((
forward_dcl))
 in (LrTable.NT 5,(result,forward_dcl1left,forward_dcl1right),rest671)
 end
| (15,(_,(_,_,YRIGHTBRACE1right))::(_,(MlyValue.interface_body 
interface_body,_,_))::_::(_,(MlyValue.interface_header 
interface_header,interface_header1left,_))::rest671) => let val result
=MlyValue.interface_dcl((
AST.InterfaceDcl(interface_header, interface_body)))
 in (LrTable.NT 8,(result,interface_header1left,YRIGHTBRACE1right),
rest671) end
| (16,(_,(_,_,YRIGHTBRACE1right))::_::(_,(MlyValue.interface_header 
interface_header,interface_header1left,_))::rest671) => let val result
=MlyValue.interface_dcl((AST.EmptyInterfaceDcl(interface_header)))
 in (LrTable.NT 8,(result,interface_header1left,YRIGHTBRACE1right),
rest671) end
| (17,(_,(MlyValue.YID YID,_,YID1right))::_::(_,(_,YABSTRACT1left,_))
::rest671) => let val result=MlyValue.forward_dcl((
AST.ForAbsInterface(Symbol.symbol YID)))
 in (LrTable.NT 9,(result,YABSTRACT1left,YID1right),rest671) end
| (18,(_,(MlyValue.YID YID,_,YID1right))::_::(_,(_,YLOCAL1left,_))::
rest671) => let val result=MlyValue.forward_dcl((
AST.ForLocalInterface(Symbol.symbol YID)))
 in (LrTable.NT 9,(result,YLOCAL1left,YID1right),rest671) end
| (19,(_,(MlyValue.YID YID,_,YID1right))::(_,(_,YINTERFACE1left,_))::
rest671) => let val result=MlyValue.forward_dcl((
AST.ForInterface(Symbol.symbol YID)))
 in (LrTable.NT 9,(result,YINTERFACE1left,YID1right),rest671) end
| (20,(_,(MlyValue.interface_inheritance_spec 
interface_inheritance_spec,_,interface_inheritance_spec1right))::(_,(
MlyValue.YID YID,_,_))::_::(_,(_,YABSTRACT1left,_))::rest671) => let 
val result=MlyValue.interface_header((
AST.AbsIntfHeader(Symbol.symbol YID, interface_inheritance_spec)))
 in (LrTable.NT 10,(result,YABSTRACT1left,
interface_inheritance_spec1right),rest671) end
| (21,(_,(MlyValue.YID YID,_,YID1right))::_::(_,(_,YABSTRACT1left,_))
::rest671) => let val result=MlyValue.interface_header((
AST.AbsIntfHeader(Symbol.symbol YID, AST.NilExp::nil)))
 in (LrTable.NT 10,(result,YABSTRACT1left,YID1right),rest671) end
| (22,(_,(MlyValue.interface_inheritance_spec 
interface_inheritance_spec,_,interface_inheritance_spec1right))::(_,(
MlyValue.YID YID,_,_))::_::(_,(_,YLOCAL1left,_))::rest671) => let val 
result=MlyValue.interface_header((
AST.LocalIntfHeader(Symbol.symbol YID, interface_inheritance_spec)))
 in (LrTable.NT 10,(result,YLOCAL1left,
interface_inheritance_spec1right),rest671) end
| (23,(_,(MlyValue.YID YID,_,YID1right))::_::(_,(_,YLOCAL1left,_))::
rest671) => let val result=MlyValue.interface_header((
AST.LocalIntfHeader(Symbol.symbol YID, AST.NilExp ::nil)))
 in (LrTable.NT 10,(result,YLOCAL1left,YID1right),rest671) end
| (24,(_,(MlyValue.interface_inheritance_spec 
interface_inheritance_spec,_,interface_inheritance_spec1right))::(_,(
MlyValue.YID YID,_,_))::(_,(_,YINTERFACE1left,_))::rest671) => let 
val result=MlyValue.interface_header((
AST.IntfHeader(Symbol.symbol YID, interface_inheritance_spec)))
 in (LrTable.NT 10,(result,YINTERFACE1left,
interface_inheritance_spec1right),rest671) end
| (25,(_,(MlyValue.YID YID,_,YID1right))::(_,(_,YINTERFACE1left,_))::
rest671) => let val result=MlyValue.interface_header((
AST.IntfHeader(Symbol.symbol YID, AST.NilExp::nil)))
 in (LrTable.NT 10,(result,YINTERFACE1left,YID1right),rest671) end
| (26,(_,(MlyValue.interface_body interface_body,_,
interface_body1right))::(_,(MlyValue.export export,export1left,_))::
rest671) => let val result=MlyValue.interface_body((
export :: interface_body))
 in (LrTable.NT 11,(result,export1left,interface_body1right),rest671)
 end
| (27,(_,(MlyValue.export export,export1left,export1right))::rest671)
 => let val result=MlyValue.interface_body((export :: nil))
 in (LrTable.NT 11,(result,export1left,export1right),rest671) end
| (28,(_,(MlyValue.mo_export mo_export,_,mo_export1right))::(_,(
MlyValue.export export,export1left,_))::rest671) => let val result=
MlyValue.mo_export((export :: mo_export))
 in (LrTable.NT 109,(result,export1left,mo_export1right),rest671) end
| (29,(_,(MlyValue.export export,export1left,export1right))::rest671)
 => let val result=MlyValue.mo_export((export :: nil))
 in (LrTable.NT 109,(result,export1left,export1right),rest671) end
| (30,(_,(_,_,YSEMI1right))::(_,(MlyValue.type_dcl type_dcl,
type_dcl1left,_))::rest671) => let val result=MlyValue.export((
type_dcl))
 in (LrTable.NT 13,(result,type_dcl1left,YSEMI1right),rest671) end
| (31,(_,(_,_,YSEMI1right))::(_,(MlyValue.const_dcl const_dcl,
const_dcl1left,_))::rest671) => let val result=MlyValue.export((
const_dcl))
 in (LrTable.NT 13,(result,const_dcl1left,YSEMI1right),rest671) end
| (32,(_,(_,_,YSEMI1right))::(_,(MlyValue.except_dcl except_dcl,
except_dcl1left,_))::rest671) => let val result=MlyValue.export((
except_dcl))
 in (LrTable.NT 13,(result,except_dcl1left,YSEMI1right),rest671) end
| (33,(_,(_,_,YSEMI1right))::(_,(MlyValue.attr_dcl attr_dcl,
attr_dcl1left,_))::rest671) => let val result=MlyValue.export((
attr_dcl))
 in (LrTable.NT 13,(result,attr_dcl1left,YSEMI1right),rest671) end
| (34,(_,(_,_,YSEMI1right))::(_,(MlyValue.op_dcl op_dcl,op_dcl1left,_)
)::rest671) => let val result=MlyValue.export((op_dcl))
 in (LrTable.NT 13,(result,op_dcl1left,YSEMI1right),rest671) end
| (35,(_,(MlyValue.mo_interface_names mo_interface_names,_,
mo_interface_names1right))::(_,(MlyValue.interface_name interface_name
,_,_))::(_,(_,YCOMMA1left,_))::rest671) => let val result=
MlyValue.mo_interface_names((interface_name :: mo_interface_names))
 in (LrTable.NT 107,(result,YCOMMA1left,mo_interface_names1right),
rest671) end
| (36,(_,(MlyValue.interface_name interface_name,_,
interface_name1right))::(_,(_,YCOMMA1left,_))::rest671) => let val 
result=MlyValue.mo_interface_names((interface_name :: nil))
 in (LrTable.NT 107,(result,YCOMMA1left,interface_name1right),rest671)
 end
| (37,(_,(_,_,mo_interface_names1right))::_::(_,(_,YCOLON1left,_))::
rest671) => let val result=MlyValue.interface_inheritance_spec((
AST.NilExp :: nil))
 in (LrTable.NT 12,(result,YCOLON1left,mo_interface_names1right),
rest671) end
| (38,(_,(_,_,interface_name1right))::(_,(_,YCOLON1left,_))::rest671)
 => let val result=MlyValue.interface_inheritance_spec((
AST.NilExp :: nil))
 in (LrTable.NT 12,(result,YCOLON1left,interface_name1right),rest671)
 end
| (39,(_,(MlyValue.scoped_name scoped_name,scoped_name1left,
scoped_name1right))::rest671) => let val result=
MlyValue.interface_name((scoped_name))
 in (LrTable.NT 16,(result,scoped_name1left,scoped_name1right),rest671
) end
| (40,(_,(MlyValue.YID YID,YID1left,YID1right))::rest671) => let val 
result=MlyValue.scoped_name((AST.ScopedName(Symbol.symbol YID)))
 in (LrTable.NT 17,(result,YID1left,YID1right),rest671) end
| (41,(_,(MlyValue.YID YID,_,YID1right))::(_,(_,YCOLONCOLON1left,_))::
rest671) => let val result=MlyValue.scoped_name((
AST.ScopedName(Symbol.symbol YID)))
 in (LrTable.NT 17,(result,YCOLONCOLON1left,YID1right),rest671) end
| (42,(_,(_,_,YID1right))::_::(_,(_,scoped_name1left,_))::rest671) => 
let val result=MlyValue.scoped_name((AST.NilExp))
 in (LrTable.NT 17,(result,scoped_name1left,YID1right),rest671) end
| (43,(_,(MlyValue.value_dcl value_dcl,value_dcl1left,value_dcl1right)
)::rest671) => let val result=MlyValue.value((value_dcl))
 in (LrTable.NT 7,(result,value_dcl1left,value_dcl1right),rest671) end
| (44,(_,(_,value_abs_dcl1left,value_abs_dcl1right))::rest671) => let 
val result=MlyValue.value((AST.NilExp))
 in (LrTable.NT 7,(result,value_abs_dcl1left,value_abs_dcl1right),
rest671) end
| (45,(_,(_,value_box_dcl1left,value_box_dcl1right))::rest671) => let 
val result=MlyValue.value((AST.NilExp))
 in (LrTable.NT 7,(result,value_box_dcl1left,value_box_dcl1right),
rest671) end
| (46,(_,(_,value_forward_dcl1left,value_forward_dcl1right))::rest671)
 => let val result=MlyValue.value((AST.NilExp))
 in (LrTable.NT 7,(result,value_forward_dcl1left,
value_forward_dcl1right),rest671) end
| (47,(_,(_,_,YID1right))::_::(_,(_,YABSTRACT1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 21,(result,YABSTRACT1left,YID1right),rest671) end
| (48,(_,(_,_,YID1right))::(_,(_,YVALUETYPE1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 21,(result,YVALUETYPE1left,YID1right),rest671) end
| (49,(_,(_,_,type_spec1right))::_::(_,(_,YVALUETYPE1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 20,(result,YVALUETYPE1left,type_spec1right),rest671)
 end
| (50,(_,(_,_,YRIGHTBRACE1right))::_::_::_::_::_::(_,(_,YABSTRACT1left
,_))::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 19,(result,YABSTRACT1left,YRIGHTBRACE1right),rest671)
 end
| (51,(_,(_,_,YRIGHTBRACE1right))::_::_::_::_::(_,(_,YABSTRACT1left,_)
)::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 19,(result,YABSTRACT1left,YRIGHTBRACE1right),rest671)
 end
| (52,(_,(_,_,YRIGHTBRACE1right))::_::_::_::_::(_,(_,YABSTRACT1left,_)
)::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 19,(result,YABSTRACT1left,YRIGHTBRACE1right),rest671)
 end
| (53,(_,(_,_,YRIGHTBRACE1right))::_::_::_::(_,(_,YABSTRACT1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 19,(result,YABSTRACT1left,YRIGHTBRACE1right),rest671)
 end
| (54,(_,(_,_,YRIGHTBRACE1right))::_::_::(_,(_,value_header1left,_))::
rest671) => let val result=MlyValue.value_dcl((AST.NilExp))
 in (LrTable.NT 18,(result,value_header1left,YRIGHTBRACE1right),
rest671) end
| (55,(_,(_,_,YRIGHTBRACE1right))::_::(_,(_,value_header1left,_))::
rest671) => let val result=MlyValue.value_dcl((AST.NilExp))
 in (LrTable.NT 18,(result,value_header1left,YRIGHTBRACE1right),
rest671) end
| (56,(_,(_,_,mo_value_element1right))::(_,(_,value_element1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 110,(result,value_element1left,mo_value_element1right)
,rest671) end
| (57,(_,(_,value_element1left,value_element1right))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 110,(result,value_element1left,value_element1right),
rest671) end
| (58,(_,(_,_,value_inheritance_spec1right))::_::_::(_,(_,YCUSTOM1left
,_))::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 105,(result,YCUSTOM1left,value_inheritance_spec1right)
,rest671) end
| (59,(_,(_,_,YID1right))::_::(_,(_,YCUSTOM1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 105,(result,YCUSTOM1left,YID1right),rest671) end
| (60,(_,(_,_,value_inheritance_spec1right))::_::(_,(_,YVALUETYPE1left
,_))::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 105,(result,YVALUETYPE1left,
value_inheritance_spec1right),rest671) end
| (61,(_,(_,_,YID1right))::(_,(_,YVALUETYPE1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 105,(result,YVALUETYPE1left,YID1right),rest671) end
| (62,(_,(_,_,mo_interface_names1right))::_::_::_::_::_::(_,(_,
YCOLON1left,_))::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YCOLON1left,mo_interface_names1right),
rest671) end
| (63,(_,(_,_,interface_name1right))::_::_::_::_::(_,(_,YCOLON1left,_)
)::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YCOLON1left,interface_name1right),rest671)
 end
| (64,(_,(_,_,mo_interface_names1right))::_::_::_::_::(_,(_,
YCOLON1left,_))::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YCOLON1left,mo_interface_names1right),
rest671) end
| (65,(_,(_,_,interface_name1right))::_::_::_::(_,(_,YCOLON1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YCOLON1left,interface_name1right),rest671)
 end
| (66,(_,(_,_,mo_interface_names1right))::_::_::_::(_,(_,
value_name1left,_))::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,value_name1left,mo_interface_names1right),
rest671) end
| (67,(_,(_,_,mo_interface_names1right))::_::_::(_,(_,value_name1left,
_))::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,value_name1left,mo_interface_names1right),
rest671) end
| (68,(_,(_,_,interface_name1right))::_::_::(_,(_,value_name1left,_))
::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,value_name1left,interface_name1right),
rest671) end
| (69,(_,(_,_,interface_name1right))::_::(_,(_,value_name1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,value_name1left,interface_name1right),
rest671) end
| (70,(_,(_,_,mo_value_name1right))::_::_::(_,(_,YCOLON1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YCOLON1left,mo_value_name1right),rest671)
 end
| (71,(_,(_,_,value_name1right))::_::(_,(_,YCOLON1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YCOLON1left,value_name1right),rest671) end
| (72,(_,(_,_,mo_value_name1right))::(_,(_,value_name1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,value_name1left,mo_value_name1right),
rest671) end
| (73,(_,(_,value_name1left,value_name1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,value_name1left,value_name1right),rest671)
 end
| (74,(_,(_,_,mo_interface_names1right))::_::(_,(_,YSUPPORTS1left,_))
::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YSUPPORTS1left,mo_interface_names1right),
rest671) end
| (75,(_,(_,_,interface_name1right))::(_,(_,YSUPPORTS1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YSUPPORTS1left,interface_name1right),
rest671) end
| (76,(_,(_,_,mo_value_name1right))::_::(_,(_,YCOMMA1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 111,(result,YCOMMA1left,mo_value_name1right),rest671)
 end
| (77,(_,(_,_,value_name1right))::(_,(_,YCOMMA1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 111,(result,YCOMMA1left,value_name1right),rest671) end
| (78,(_,(_,scoped_name1left,scoped_name1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 24,(result,scoped_name1left,scoped_name1right),rest671
) end
| (79,(_,(_,export1left,export1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 25,(result,export1left,export1right),rest671) end
| (80,(_,(_,state_member1left,state_member1right))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 25,(result,state_member1left,state_member1right),
rest671) end
| (81,(_,(_,init_dcl1left,init_dcl1right))::rest671) => let val result
=MlyValue.ntVOID(())
 in (LrTable.NT 25,(result,init_dcl1left,init_dcl1right),rest671) end
| (82,(_,(_,_,YSEMI1right))::_::_::(_,(_,YPUBLIC1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 26,(result,YPUBLIC1left,YSEMI1right),rest671) end
| (83,(_,(_,_,YSEMI1right))::_::_::(_,(_,YPRIVATE1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 26,(result,YPRIVATE1left,YSEMI1right),rest671) end
| (84,(_,(_,_,YSEMI1right))::_::_::_::_::(_,(_,YFACTORY1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 27,(result,YFACTORY1left,YSEMI1right),rest671) end
| (85,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,YFACTORY1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 27,(result,YFACTORY1left,YSEMI1right),rest671) end
| (86,(_,(_,_,mo_init_param_decl1right))::(_,(_,init_param_decl1left,_
))::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 29,(result,init_param_decl1left,
mo_init_param_decl1right),rest671) end
| (87,(_,(_,_,mo_init_param_decl1right))::_::(_,(_,YCOMMA1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 112,(result,YCOMMA1left,mo_init_param_decl1right),
rest671) end
| (88,(_,(_,_,init_param_decl1right))::(_,(_,YCOMMA1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 112,(result,YCOMMA1left,init_param_decl1right),rest671
) end
| (89,(_,(_,_,simple_declarator1right))::_::(_,(_,
init_param_attribute1left,_))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 30,(result,init_param_attribute1left,
simple_declarator1right),rest671) end
| (90,(_,(_,YIN1left,YIN1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 31,(result,YIN1left,YIN1right),rest671) end
| (91,(_,(MlyValue.const_exp const_exp,_,const_exp1right))::_::(_,(
MlyValue.YID YID,_,_))::(_,(MlyValue.const_type const_type,_,_))::(_,(
_,YCONST1left,_))::rest671) => let val result=MlyValue.const_dcl((
AST.ConstDcl(const_type, Symbol.symbol YID, const_exp)))
 in (LrTable.NT 3,(result,YCONST1left,const_exp1right),rest671) end
| (92,(_,(MlyValue.integer_type integer_type,integer_type1left,
integer_type1right))::rest671) => let val result=MlyValue.const_type((
integer_type))
 in (LrTable.NT 34,(result,integer_type1left,integer_type1right),
rest671) end
| (93,(_,(MlyValue.char_type char_type,char_type1left,char_type1right)
)::rest671) => let val result=MlyValue.const_type((char_type))
 in (LrTable.NT 34,(result,char_type1left,char_type1right),rest671)
 end
| (94,(_,(MlyValue.wide_char_type wide_char_type,wide_char_type1left,
wide_char_type1right))::rest671) => let val result=MlyValue.const_type
((wide_char_type))
 in (LrTable.NT 34,(result,wide_char_type1left,wide_char_type1right),
rest671) end
| (95,(_,(MlyValue.boolean_type boolean_type,boolean_type1left,
boolean_type1right))::rest671) => let val result=MlyValue.const_type((
boolean_type))
 in (LrTable.NT 34,(result,boolean_type1left,boolean_type1right),
rest671) end
| (96,(_,(MlyValue.floating_pt_type floating_pt_type,
floating_pt_type1left,floating_pt_type1right))::rest671) => let val 
result=MlyValue.const_type((floating_pt_type))
 in (LrTable.NT 34,(result,floating_pt_type1left,
floating_pt_type1right),rest671) end
| (97,(_,(MlyValue.string_type string_type,string_type1left,
string_type1right))::rest671) => let val result=MlyValue.const_type((
string_type))
 in (LrTable.NT 34,(result,string_type1left,string_type1right),rest671
) end
| (98,(_,(MlyValue.wide_string_type wide_string_type,
wide_string_type1left,wide_string_type1right))::rest671) => let val 
result=MlyValue.const_type((wide_string_type))
 in (LrTable.NT 34,(result,wide_string_type1left,
wide_string_type1right),rest671) end
| (99,(_,(MlyValue.fixed_pt_const_type fixed_pt_const_type,
fixed_pt_const_type1left,fixed_pt_const_type1right))::rest671) => let 
val result=MlyValue.const_type((fixed_pt_const_type))
 in (LrTable.NT 34,(result,fixed_pt_const_type1left,
fixed_pt_const_type1right),rest671) end
| (100,(_,(MlyValue.scoped_name scoped_name,scoped_name1left,
scoped_name1right))::rest671) => let val result=MlyValue.const_type((
AST.ScopedType(scoped_name)))
 in (LrTable.NT 34,(result,scoped_name1left,scoped_name1right),rest671
) end
| (101,(_,(MlyValue.octet_type octet_type,octet_type1left,
octet_type1right))::rest671) => let val result=MlyValue.const_type((
octet_type))
 in (LrTable.NT 34,(result,octet_type1left,octet_type1right),rest671)
 end
| (102,(_,(_,or_expr1left,or_expr1right))::rest671) => let val result=
MlyValue.const_exp((AST.NilExp))
 in (LrTable.NT 35,(result,or_expr1left,or_expr1right),rest671) end
| (103,(_,(_,xor_expr1left,xor_expr1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 45,(result,xor_expr1left,xor_expr1right),rest671) end
| (104,(_,(_,_,xor_expr1right))::_::(_,(_,or_expr1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 45,(result,or_expr1left,xor_expr1right),rest671) end
| (105,(_,(_,and_expr1left,and_expr1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 46,(result,and_expr1left,and_expr1right),rest671) end
| (106,(_,(_,_,and_expr1right))::_::(_,(_,xor_expr1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 46,(result,xor_expr1left,and_expr1right),rest671) end
| (107,(_,(_,shift_expr1left,shift_expr1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 47,(result,shift_expr1left,shift_expr1right),rest671)
 end
| (108,(_,(_,_,shift_expr1right))::_::(_,(_,and_expr1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 47,(result,and_expr1left,shift_expr1right),rest671)
 end
| (109,(_,(_,add_expr1left,add_expr1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 48,(result,add_expr1left,add_expr1right),rest671) end
| (110,(_,(_,_,add_expr1right))::_::(_,(_,shift_expr1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 48,(result,shift_expr1left,add_expr1right),rest671)
 end
| (111,(_,(_,_,add_expr1right))::_::(_,(_,shift_expr1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 48,(result,shift_expr1left,add_expr1right),rest671)
 end
| (112,(_,(_,mult_expr1left,mult_expr1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 49,(result,mult_expr1left,mult_expr1right),rest671)
 end
| (113,(_,(_,_,mult_expr1right))::_::(_,(_,add_expr1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 49,(result,add_expr1left,mult_expr1right),rest671) end
| (114,(_,(_,_,mult_expr1right))::_::(_,(_,add_expr1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 49,(result,add_expr1left,mult_expr1right),rest671) end
| (115,(_,(_,unary_expr1left,unary_expr1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 50,(result,unary_expr1left,unary_expr1right),rest671)
 end
| (116,(_,(_,_,unary_expr1right))::_::(_,(_,mult_expr1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 50,(result,mult_expr1left,unary_expr1right),rest671)
 end
| (117,(_,(_,_,unary_expr1right))::_::(_,(_,mult_expr1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 50,(result,mult_expr1left,unary_expr1right),rest671)
 end
| (118,(_,(_,_,unary_expr1right))::_::(_,(_,mult_expr1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 50,(result,mult_expr1left,unary_expr1right),rest671)
 end
| (119,(_,(_,_,primary_expr1right))::(_,(_,unary_operator1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 51,(result,unary_operator1left,primary_expr1right),
rest671) end
| (120,(_,(_,primary_expr1left,primary_expr1right))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 51,(result,primary_expr1left,primary_expr1right),
rest671) end
| (121,(_,(_,YMINUS1left,YMINUS1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 52,(result,YMINUS1left,YMINUS1right),rest671) end
| (122,(_,(_,YPLUS1left,YPLUS1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 52,(result,YPLUS1left,YPLUS1right),rest671) end
| (123,(_,(_,YTILDE1left,YTILDE1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 52,(result,YTILDE1left,YTILDE1right),rest671) end
| (124,(_,(_,scoped_name1left,scoped_name1right))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 53,(result,scoped_name1left,scoped_name1right),rest671
) end
| (125,(_,(_,literal1left,literal1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 53,(result,literal1left,literal1right),rest671) end
| (126,(_,(_,_,YRIGHTPAREN1right))::_::(_,(_,YLEFTPAREN1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 53,(result,YLEFTPAREN1left,YRIGHTPAREN1right),rest671)
 end
| (127,(_,(_,integer_literal1left,integer_literal1right))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 54,(result,integer_literal1left,integer_literal1right)
,rest671) end
| (128,(_,(_,string_literal1left,string_literal1right))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 54,(result,string_literal1left,string_literal1right),
rest671) end
| (129,(_,(_,wide_string_literal1left,wide_string_literal1right))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 54,(result,wide_string_literal1left,
wide_string_literal1right),rest671) end
| (130,(_,(_,character_literal1left,character_literal1right))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 54,(result,character_literal1left,
character_literal1right),rest671) end
| (131,(_,(_,wide_character_literal1left,wide_character_literal1right)
)::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 54,(result,wide_character_literal1left,
wide_character_literal1right),rest671) end
| (132,(_,(_,fixed_pt_literal1left,fixed_pt_literal1right))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 54,(result,fixed_pt_literal1left,
fixed_pt_literal1right),rest671) end
| (133,(_,(_,floating_pt_literal1left,floating_pt_literal1right))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 54,(result,floating_pt_literal1left,
floating_pt_literal1right),rest671) end
| (134,(_,(_,boolean_literal1left,boolean_literal1right))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 54,(result,boolean_literal1left,boolean_literal1right)
,rest671) end
| (135,(_,(_,YTRUE1left,YTRUE1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 62,(result,YTRUE1left,YTRUE1right),rest671) end
| (136,(_,(_,YFALSE1left,YFALSE1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 62,(result,YFALSE1left,YFALSE1right),rest671) end
| (137,(_,(MlyValue.const_exp const_exp,const_exp1left,const_exp1right
))::rest671) => let val result=MlyValue.positive_int_const((const_exp)
)
 in (LrTable.NT 63,(result,const_exp1left,const_exp1right),rest671)
 end
| (138,(_,(MlyValue.type_declarator type_declarator,_,
type_declarator1right))::(_,(_,YTYPEDEF1left,_))::rest671) => let val 
result=MlyValue.type_dcl((AST.TypeDefDcl(type_declarator)))
 in (LrTable.NT 2,(result,YTYPEDEF1left,type_declarator1right),rest671
) end
| (139,(_,(_,struct_type1left,struct_type1right))::rest671) => let 
val result=MlyValue.type_dcl((AST.NilExp))
 in (LrTable.NT 2,(result,struct_type1left,struct_type1right),rest671)
 end
| (140,(_,(_,union_type1left,union_type1right))::rest671) => let val 
result=MlyValue.type_dcl((AST.NilExp))
 in (LrTable.NT 2,(result,union_type1left,union_type1right),rest671)
 end
| (141,(_,(_,enum_type1left,enum_type1right))::rest671) => let val 
result=MlyValue.type_dcl((AST.NilExp))
 in (LrTable.NT 2,(result,enum_type1left,enum_type1right),rest671) end
| (142,(_,(_,_,simple_declarator1right))::(_,(_,YNATIVE1left,_))::
rest671) => let val result=MlyValue.type_dcl((AST.NilExp))
 in (LrTable.NT 2,(result,YNATIVE1left,simple_declarator1right),
rest671) end
| (143,(_,(_,constr_forward_decl1left,constr_forward_decl1right))::
rest671) => let val result=MlyValue.type_dcl((AST.NilExp))
 in (LrTable.NT 2,(result,constr_forward_decl1left,
constr_forward_decl1right),rest671) end
| (144,(_,(MlyValue.declarators declarators,_,declarators1right))::(_,
(MlyValue.type_spec type_spec,type_spec1left,_))::rest671) => let val 
result=MlyValue.type_declarator((
AST.TypeDeclarator(type_spec,declarators)))
 in (LrTable.NT 64,(result,type_spec1left,declarators1right),rest671)
 end
| (145,(_,(MlyValue.simple_type_spec simple_type_spec,
simple_type_spec1left,simple_type_spec1right))::rest671) => let val 
result=MlyValue.type_spec((simple_type_spec))
 in (LrTable.NT 22,(result,simple_type_spec1left,
simple_type_spec1right),rest671) end
| (146,(_,(MlyValue.constr_type_spec constr_type_spec,
constr_type_spec1left,constr_type_spec1right))::rest671) => let val 
result=MlyValue.type_spec((constr_type_spec))
 in (LrTable.NT 22,(result,constr_type_spec1left,
constr_type_spec1right),rest671) end
| (147,(_,(MlyValue.base_type_spec base_type_spec,base_type_spec1left,
base_type_spec1right))::rest671) => let val result=
MlyValue.simple_type_spec((base_type_spec))
 in (LrTable.NT 69,(result,base_type_spec1left,base_type_spec1right),
rest671) end
| (148,(_,(MlyValue.template_type_spec template_type_spec,
template_type_spec1left,template_type_spec1right))::rest671) => let 
val result=MlyValue.simple_type_spec((template_type_spec))
 in (LrTable.NT 69,(result,template_type_spec1left,
template_type_spec1right),rest671) end
| (149,(_,(_,scoped_name1left,scoped_name1right))::rest671) => let 
val result=MlyValue.simple_type_spec((AST.NilType))
 in (LrTable.NT 69,(result,scoped_name1left,scoped_name1right),rest671
) end
| (150,(_,(MlyValue.floating_pt_type floating_pt_type,
floating_pt_type1left,floating_pt_type1right))::rest671) => let val 
result=MlyValue.base_type_spec((floating_pt_type))
 in (LrTable.NT 71,(result,floating_pt_type1left,
floating_pt_type1right),rest671) end
| (151,(_,(MlyValue.integer_type integer_type,integer_type1left,
integer_type1right))::rest671) => let val result=
MlyValue.base_type_spec((integer_type))
 in (LrTable.NT 71,(result,integer_type1left,integer_type1right),
rest671) end
| (152,(_,(MlyValue.char_type char_type,char_type1left,char_type1right
))::rest671) => let val result=MlyValue.base_type_spec((char_type))
 in (LrTable.NT 71,(result,char_type1left,char_type1right),rest671)
 end
| (153,(_,(MlyValue.wide_char_type wide_char_type,wide_char_type1left,
wide_char_type1right))::rest671) => let val result=
MlyValue.base_type_spec((wide_char_type))
 in (LrTable.NT 71,(result,wide_char_type1left,wide_char_type1right),
rest671) end
| (154,(_,(MlyValue.boolean_type boolean_type,boolean_type1left,
boolean_type1right))::rest671) => let val result=
MlyValue.base_type_spec((boolean_type))
 in (LrTable.NT 71,(result,boolean_type1left,boolean_type1right),
rest671) end
| (155,(_,(MlyValue.octet_type octet_type,octet_type1left,
octet_type1right))::rest671) => let val result=MlyValue.base_type_spec
((octet_type))
 in (LrTable.NT 71,(result,octet_type1left,octet_type1right),rest671)
 end
| (156,(_,(MlyValue.any_type any_type,any_type1left,any_type1right))::
rest671) => let val result=MlyValue.base_type_spec((any_type))
 in (LrTable.NT 71,(result,any_type1left,any_type1right),rest671) end
| (157,(_,(MlyValue.object_type object_type,object_type1left,
object_type1right))::rest671) => let val result=
MlyValue.base_type_spec((object_type))
 in (LrTable.NT 71,(result,object_type1left,object_type1right),rest671
) end
| (158,(_,(MlyValue.value_base_type value_base_type,
value_base_type1left,value_base_type1right))::rest671) => let val 
result=MlyValue.base_type_spec((value_base_type))
 in (LrTable.NT 71,(result,value_base_type1left,value_base_type1right)
,rest671) end
| (159,(_,(MlyValue.sequence_type sequence_type,sequence_type1left,
sequence_type1right))::rest671) => let val result=
MlyValue.template_type_spec((sequence_type))
 in (LrTable.NT 72,(result,sequence_type1left,sequence_type1right),
rest671) end
| (160,(_,(MlyValue.string_type string_type,string_type1left,
string_type1right))::rest671) => let val result=
MlyValue.template_type_spec((string_type))
 in (LrTable.NT 72,(result,string_type1left,string_type1right),rest671
) end
| (161,(_,(MlyValue.wide_string_type wide_string_type,
wide_string_type1left,wide_string_type1right))::rest671) => let val 
result=MlyValue.template_type_spec((wide_string_type))
 in (LrTable.NT 72,(result,wide_string_type1left,
wide_string_type1right),rest671) end
| (162,(_,(MlyValue.fixed_pt_type fixed_pt_type,fixed_pt_type1left,
fixed_pt_type1right))::rest671) => let val result=
MlyValue.template_type_spec((fixed_pt_type))
 in (LrTable.NT 72,(result,fixed_pt_type1left,fixed_pt_type1right),
rest671) end
| (163,(_,(MlyValue.struct_type struct_type,struct_type1left,
struct_type1right))::rest671) => let val result=
MlyValue.constr_type_spec((struct_type))
 in (LrTable.NT 70,(result,struct_type1left,struct_type1right),rest671
) end
| (164,(_,(MlyValue.union_type union_type,union_type1left,
union_type1right))::rest671) => let val result=
MlyValue.constr_type_spec((union_type))
 in (LrTable.NT 70,(result,union_type1left,union_type1right),rest671)
 end
| (165,(_,(MlyValue.enum_type enum_type,enum_type1left,enum_type1right
))::rest671) => let val result=MlyValue.constr_type_spec((enum_type))
 in (LrTable.NT 70,(result,enum_type1left,enum_type1right),rest671)
 end
| (166,(_,(MlyValue.mo_declarator mo_declarator,_,mo_declarator1right)
)::(_,(MlyValue.declarator declarator,declarator1left,_))::rest671)
 => let val result=MlyValue.declarators((declarator :: mo_declarator))
 in (LrTable.NT 28,(result,declarator1left,mo_declarator1right),
rest671) end
| (167,(_,(MlyValue.declarator declarator,declarator1left,
declarator1right))::rest671) => let val result=MlyValue.declarators((
declarator :: nil))
 in (LrTable.NT 28,(result,declarator1left,declarator1right),rest671)
 end
| (168,(_,(MlyValue.mo_declarator mo_declarator,_,mo_declarator1right)
)::(_,(MlyValue.declarator declarator,_,_))::(_,(_,YCOMMA1left,_))::
rest671) => let val result=MlyValue.mo_declarator((
declarator :: mo_declarator))
 in (LrTable.NT 113,(result,YCOMMA1left,mo_declarator1right),rest671)
 end
| (169,(_,(MlyValue.declarator declarator,_,declarator1right))::(_,(_,
YCOMMA1left,_))::rest671) => let val result=MlyValue.mo_declarator((
declarator :: nil))
 in (LrTable.NT 113,(result,YCOMMA1left,declarator1right),rest671) end
| (170,(_,(MlyValue.simple_declarator simple_declarator,
simple_declarator1left,simple_declarator1right))::rest671) => let val 
result=MlyValue.declarator((simple_declarator))
 in (LrTable.NT 78,(result,simple_declarator1left,
simple_declarator1right),rest671) end
| (171,(_,(MlyValue.complex_declarator complex_declarator,
complex_declarator1left,complex_declarator1right))::rest671) => let 
val result=MlyValue.declarator((complex_declarator))
 in (LrTable.NT 78,(result,complex_declarator1left,
complex_declarator1right),rest671) end
| (172,(_,(MlyValue.YID YID,YID1left,YID1right))::rest671) => let val 
result=MlyValue.simple_declarator((AST.SimpleDec(Symbol.symbol YID)))
 in (LrTable.NT 33,(result,YID1left,YID1right),rest671) end
| (173,(_,(MlyValue.array_declarator array_declarator,
array_declarator1left,array_declarator1right))::rest671) => let val 
result=MlyValue.complex_declarator((array_declarator))
 in (LrTable.NT 79,(result,array_declarator1left,
array_declarator1right),rest671) end
| (174,(_,(_,YFLOAT1left,YFLOAT1right))::rest671) => let val result=
MlyValue.floating_pt_type((AST.FloatType))
 in (LrTable.NT 40,(result,YFLOAT1left,YFLOAT1right),rest671) end
| (175,(_,(_,YDOUBLE1left,YDOUBLE1right))::rest671) => let val result=
MlyValue.floating_pt_type((AST.DoubleType))
 in (LrTable.NT 40,(result,YDOUBLE1left,YDOUBLE1right),rest671) end
| (176,(_,(_,_,YDOUBLE1right))::(_,(_,YLONG1left,_))::rest671) => let 
val result=MlyValue.floating_pt_type((AST.LongDoubleType))
 in (LrTable.NT 40,(result,YLONG1left,YDOUBLE1right),rest671) end
| (177,(_,(MlyValue.signed_int signed_int,signed_int1left,
signed_int1right))::rest671) => let val result=MlyValue.integer_type((
signed_int))
 in (LrTable.NT 36,(result,signed_int1left,signed_int1right),rest671)
 end
| (178,(_,(MlyValue.unsigned_int unsigned_int,unsigned_int1left,
unsigned_int1right))::rest671) => let val result=MlyValue.integer_type
((unsigned_int))
 in (LrTable.NT 36,(result,unsigned_int1left,unsigned_int1right),
rest671) end
| (179,(_,(MlyValue.signed_short_int signed_short_int,
signed_short_int1left,signed_short_int1right))::rest671) => let val 
result=MlyValue.signed_int((signed_short_int))
 in (LrTable.NT 81,(result,signed_short_int1left,
signed_short_int1right),rest671) end
| (180,(_,(MlyValue.signed_long_int signed_long_int,
signed_long_int1left,signed_long_int1right))::rest671) => let val 
result=MlyValue.signed_int((signed_long_int))
 in (LrTable.NT 81,(result,signed_long_int1left,signed_long_int1right)
,rest671) end
| (181,(_,(MlyValue.signed_longlong_int signed_longlong_int,
signed_longlong_int1left,signed_longlong_int1right))::rest671) => let 
val result=MlyValue.signed_int((signed_longlong_int))
 in (LrTable.NT 81,(result,signed_longlong_int1left,
signed_longlong_int1right),rest671) end
| (182,(_,(_,YSHORT1left,YSHORT1right))::rest671) => let val result=
MlyValue.signed_short_int((AST.ShortIntType))
 in (LrTable.NT 83,(result,YSHORT1left,YSHORT1right),rest671) end
| (183,(_,(_,YLONG1left,YLONG1right))::rest671) => let val result=
MlyValue.signed_long_int((AST.LongIntType))
 in (LrTable.NT 84,(result,YLONG1left,YLONG1right),rest671) end
| (184,(_,(_,_,YLONG2right))::(_,(_,YLONG1left,_))::rest671) => let 
val result=MlyValue.signed_longlong_int((AST.LongLongIntType))
 in (LrTable.NT 85,(result,YLONG1left,YLONG2right),rest671) end
| (185,(_,(MlyValue.unsigned_short_int unsigned_short_int,
unsigned_short_int1left,unsigned_short_int1right))::rest671) => let 
val result=MlyValue.unsigned_int((unsigned_short_int))
 in (LrTable.NT 82,(result,unsigned_short_int1left,
unsigned_short_int1right),rest671) end
| (186,(_,(MlyValue.unsigned_long_int unsigned_long_int,
unsigned_long_int1left,unsigned_long_int1right))::rest671) => let val 
result=MlyValue.unsigned_int((unsigned_long_int))
 in (LrTable.NT 82,(result,unsigned_long_int1left,
unsigned_long_int1right),rest671) end
| (187,(_,(MlyValue.unsigned_longlong_int unsigned_longlong_int,
unsigned_longlong_int1left,unsigned_longlong_int1right))::rest671) => 
let val result=MlyValue.unsigned_int((unsigned_longlong_int))
 in (LrTable.NT 82,(result,unsigned_longlong_int1left,
unsigned_longlong_int1right),rest671) end
| (188,(_,(_,_,YSHORT1right))::(_,(_,YUNSIGNED1left,_))::rest671) => 
let val result=MlyValue.unsigned_short_int((AST.UnsignedShortIntType))
 in (LrTable.NT 86,(result,YUNSIGNED1left,YSHORT1right),rest671) end
| (189,(_,(_,_,YLONG1right))::(_,(_,YUNSIGNED1left,_))::rest671) => 
let val result=MlyValue.unsigned_long_int((AST.UnsignedLongIntType))
 in (LrTable.NT 87,(result,YUNSIGNED1left,YLONG1right),rest671) end
| (190,(_,(_,_,YLONG2right))::_::(_,(_,YUNSIGNED1left,_))::rest671)
 => let val result=MlyValue.unsigned_longlong_int((
AST.UnsignedLongLongIntType))
 in (LrTable.NT 88,(result,YUNSIGNED1left,YLONG2right),rest671) end
| (191,(_,(_,YCHAR1left,YCHAR1right))::rest671) => let val result=
MlyValue.char_type((AST.CharType))
 in (LrTable.NT 37,(result,YCHAR1left,YCHAR1right),rest671) end
| (192,(_,(_,YWCHAR1left,YWCHAR1right))::rest671) => let val result=
MlyValue.wide_char_type((AST.WCharType))
 in (LrTable.NT 38,(result,YWCHAR1left,YWCHAR1right),rest671) end
| (193,(_,(_,YBOOLEAN1left,YBOOLEAN1right))::rest671) => let val 
result=MlyValue.boolean_type((AST.BooleanType))
 in (LrTable.NT 39,(result,YBOOLEAN1left,YBOOLEAN1right),rest671) end
| (194,(_,(_,YOCTET1left,YOCTET1right))::rest671) => let val result=
MlyValue.octet_type((AST.OctetType))
 in (LrTable.NT 44,(result,YOCTET1left,YOCTET1right),rest671) end
| (195,(_,(_,YANY1left,YANY1right))::rest671) => let val result=
MlyValue.any_type((AST.AnyType))
 in (LrTable.NT 73,(result,YANY1left,YANY1right),rest671) end
| (196,(_,(_,YOBJECT1left,YOBJECT1right))::rest671) => let val result=
MlyValue.object_type((AST.ObjectType))
 in (LrTable.NT 74,(result,YOBJECT1left,YOBJECT1right),rest671) end
| (197,(_,(_,_,YRIGHTBRACE1right))::_::_::_::(_,(_,YSTRUCT1left,_))::
rest671) => let val result=MlyValue.struct_type((AST.StructType))
 in (LrTable.NT 65,(result,YSTRUCT1left,YRIGHTBRACE1right),rest671)
 end
| (198,(_,(_,_,member_list1right))::(_,(_,member1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 89,(result,member1left,member_list1right),rest671) end
| (199,(_,(_,member1left,member1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 89,(result,member1left,member1right),rest671) end
| (200,(_,(_,_,YSEMI1right))::(_,(MlyValue.declarators declarators,_,_
))::(_,(MlyValue.type_spec type_spec,type_spec1left,_))::rest671) => 
let val result=MlyValue.member((AST.Member(type_spec, declarators)))
 in (LrTable.NT 90,(result,type_spec1left,YSEMI1right),rest671) end
| (201,(_,(_,_,YRIGHTBRACE1right))::_::_::_::_::_::_::_::(_,(_,
YUNION1left,_))::rest671) => let val result=MlyValue.union_type((
AST.UnionType))
 in (LrTable.NT 66,(result,YUNION1left,YRIGHTBRACE1right),rest671) end
| (202,(_,(MlyValue.integer_type integer_type,integer_type1left,
integer_type1right))::rest671) => let val result=
MlyValue.switch_type_spec((integer_type))
 in (LrTable.NT 91,(result,integer_type1left,integer_type1right),
rest671) end
| (203,(_,(MlyValue.char_type char_type,char_type1left,char_type1right
))::rest671) => let val result=MlyValue.switch_type_spec((char_type))
 in (LrTable.NT 91,(result,char_type1left,char_type1right),rest671)
 end
| (204,(_,(MlyValue.boolean_type boolean_type,boolean_type1left,
boolean_type1right))::rest671) => let val result=
MlyValue.switch_type_spec((boolean_type))
 in (LrTable.NT 91,(result,boolean_type1left,boolean_type1right),
rest671) end
| (205,(_,(MlyValue.enum_type enum_type,enum_type1left,enum_type1right
))::rest671) => let val result=MlyValue.switch_type_spec((enum_type))
 in (LrTable.NT 91,(result,enum_type1left,enum_type1right),rest671)
 end
| (206,(_,(_,scoped_name1left,scoped_name1right))::rest671) => let 
val result=MlyValue.switch_type_spec((AST.NilType))
 in (LrTable.NT 91,(result,scoped_name1left,scoped_name1right),rest671
) end
| (207,(_,(_,_,switch_body1right))::(_,(_,case1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 92,(result,case1left,switch_body1right),rest671) end
| (208,(_,(_,case1left,case1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 92,(result,case1left,case1right),rest671) end
| (209,(_,(_,_,YSEMI1right))::_::_::(_,(_,case_label1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 93,(result,case_label1left,YSEMI1right),rest671) end
| (210,(_,(_,_,YSEMI1right))::_::(_,(_,case_label1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 93,(result,case_label1left,YSEMI1right),rest671) end
| (211,(_,(_,_,mo_case_label1right))::(_,(_,case_label1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 114,(result,case_label1left,mo_case_label1right),
rest671) end
| (212,(_,(_,case_label1left,case_label1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 114,(result,case_label1left,case_label1right),rest671)
 end
| (213,(_,(_,_,YCOLON1right))::_::(_,(_,YCASE1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 94,(result,YCASE1left,YCOLON1right),rest671) end
| (214,(_,(_,_,YCOLON1right))::(_,(_,YDEFAULT1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 94,(result,YDEFAULT1left,YCOLON1right),rest671) end
| (215,(_,(_,_,declarator1right))::(_,(_,type_spec1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 95,(result,type_spec1left,declarator1right),rest671)
 end
| (216,(_,(_,_,YRIGHTBRACE1right))::_::_::_::_::(_,(_,YENUM1left,_))::
rest671) => let val result=MlyValue.enum_type((AST.NilType))
 in (LrTable.NT 67,(result,YENUM1left,YRIGHTBRACE1right),rest671) end
| (217,(_,(_,_,YRIGHTBRACE1right))::_::_::_::(_,(_,YENUM1left,_))::
rest671) => let val result=MlyValue.enum_type((AST.NilType))
 in (LrTable.NT 67,(result,YENUM1left,YRIGHTBRACE1right),rest671) end
| (218,(_,(_,_,mo_enumerator1right))::_::(_,(_,YCOMMA1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 115,(result,YCOMMA1left,mo_enumerator1right),rest671)
 end
| (219,(_,(_,_,enumerator1right))::(_,(_,YCOMMA1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 115,(result,YCOMMA1left,enumerator1right),rest671) end
| (220,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 96,(result,YID1left,YID1right),rest671) end
| (221,(_,(_,_,YRIGHTANGLE1right))::_::_::_::_::(_,(_,YSEQUENCE1left,_
))::rest671) => let val result=MlyValue.sequence_type((AST.NilType))
 in (LrTable.NT 76,(result,YSEQUENCE1left,YRIGHTANGLE1right),rest671)
 end
| (222,(_,(_,_,YRIGHTANGLE1right))::_::_::(_,(_,YSEQUENCE1left,_))::
rest671) => let val result=MlyValue.sequence_type((AST.NilType))
 in (LrTable.NT 76,(result,YSEQUENCE1left,YRIGHTANGLE1right),rest671)
 end
| (223,(_,(_,_,YRIGHTANGLE1right))::(_,(MlyValue.positive_int_const 
positive_int_const,_,_))::_::(_,(_,YSTRING1left,_))::rest671) => let 
val result=MlyValue.string_type((AST.StringType(positive_int_const)))
 in (LrTable.NT 41,(result,YSTRING1left,YRIGHTANGLE1right),rest671)
 end
| (224,(_,(_,YSTRING1left,YSTRING1right))::rest671) => let val result=
MlyValue.string_type((AST.StringType(AST.NilExp)))
 in (LrTable.NT 41,(result,YSTRING1left,YSTRING1right),rest671) end
| (225,(_,(_,_,YRIGHTANGLE1right))::(_,(MlyValue.positive_int_const 
positive_int_const,_,_))::_::(_,(_,YWSTRING1left,_))::rest671) => let 
val result=MlyValue.wide_string_type((
AST.WStringType(positive_int_const)))
 in (LrTable.NT 42,(result,YWSTRING1left,YRIGHTANGLE1right),rest671)
 end
| (226,(_,(_,YWSTRING1left,YWSTRING1right))::rest671) => let val 
result=MlyValue.wide_string_type((AST.WStringType(AST.NilExp)))
 in (LrTable.NT 42,(result,YWSTRING1left,YWSTRING1right),rest671) end
| (227,(_,(_,_,mo_fixed_array_size1right))::_::(_,(MlyValue.YID YID,
YID1left,_))::rest671) => let val result=MlyValue.array_declarator((
AST.ArrayDec(Symbol.symbol YID)))
 in (LrTable.NT 80,(result,YID1left,mo_fixed_array_size1right),rest671
) end
| (228,(_,(_,_,fixed_array_size1right))::(_,(MlyValue.YID YID,YID1left
,_))::rest671) => let val result=MlyValue.array_declarator((
AST.ArrayDec(Symbol.symbol YID)))
 in (LrTable.NT 80,(result,YID1left,fixed_array_size1right),rest671)
 end
| (229,(_,(_,_,mo_fixed_array_size1right))::(_,(_,
fixed_array_size1left,_))::rest671) => let val result=MlyValue.ntVOID(
())
 in (LrTable.NT 117,(result,fixed_array_size1left,
mo_fixed_array_size1right),rest671) end
| (230,(_,(_,fixed_array_size1left,fixed_array_size1right))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 117,(result,fixed_array_size1left,
fixed_array_size1right),rest671) end
| (231,(_,(_,_,YRIGHTBRACKET1right))::_::(_,(_,YLEFTBRACKET1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 97,(result,YLEFTBRACKET1left,YRIGHTBRACKET1right),
rest671) end
| (232,(_,(MlyValue.mo_simple_declarator mo_simple_declarator,_,
mo_simple_declarator1right))::(_,(MlyValue.simple_declarator 
simple_declarator,_,_))::(_,(MlyValue.param_type_spec param_type_spec,
_,_))::_::(_,(_,YREADONLY1left,_))::rest671) => let val result=
MlyValue.attr_dcl((
AST.ReadOnlyAttribute(param_type_spec, simple_declarator :: mo_simple_declarator)
))
 in (LrTable.NT 14,(result,YREADONLY1left,mo_simple_declarator1right),
rest671) end
| (233,(_,(MlyValue.simple_declarator simple_declarator,_,
simple_declarator1right))::(_,(MlyValue.param_type_spec 
param_type_spec,_,_))::_::(_,(_,YREADONLY1left,_))::rest671) => let 
val result=MlyValue.attr_dcl((
AST.ReadOnlyAttribute(param_type_spec, simple_declarator :: nil)))
 in (LrTable.NT 14,(result,YREADONLY1left,simple_declarator1right),
rest671) end
| (234,(_,(MlyValue.mo_simple_declarator mo_simple_declarator,_,
mo_simple_declarator1right))::(_,(MlyValue.simple_declarator 
simple_declarator,_,_))::(_,(MlyValue.param_type_spec param_type_spec,
_,_))::(_,(_,YATTRIBUTE1left,_))::rest671) => let val result=
MlyValue.attr_dcl((
AST.Attribute(param_type_spec, simple_declarator :: mo_simple_declarator)
))
 in (LrTable.NT 14,(result,YATTRIBUTE1left,mo_simple_declarator1right)
,rest671) end
| (235,(_,(MlyValue.simple_declarator simple_declarator,_,
simple_declarator1right))::(_,(MlyValue.param_type_spec 
param_type_spec,_,_))::(_,(_,YATTRIBUTE1left,_))::rest671) => let val 
result=MlyValue.attr_dcl((
AST.Attribute(param_type_spec, simple_declarator :: nil)))
 in (LrTable.NT 14,(result,YATTRIBUTE1left,simple_declarator1right),
rest671) end
| (236,(_,(MlyValue.mo_simple_declarator mo_simple_declarator,_,
mo_simple_declarator1right))::(_,(MlyValue.simple_declarator 
simple_declarator,_,_))::(_,(_,YCOMMA1left,_))::rest671) => let val 
result=MlyValue.mo_simple_declarator((
simple_declarator :: mo_simple_declarator))
 in (LrTable.NT 118,(result,YCOMMA1left,mo_simple_declarator1right),
rest671) end
| (237,(_,(MlyValue.simple_declarator simple_declarator,_,
simple_declarator1right))::(_,(_,YCOMMA1left,_))::rest671) => let val 
result=MlyValue.mo_simple_declarator((simple_declarator :: nil))
 in (LrTable.NT 118,(result,YCOMMA1left,simple_declarator1right),
rest671) end
| (238,(_,(_,_,YRIGHTBRACE1right))::(_,(MlyValue.mo_member mo_member,_
,_))::_::(_,(MlyValue.YID YID,_,_))::(_,(_,YEXCEPTION1left,_))::
rest671) => let val result=MlyValue.except_dcl((
AST.ExceptDcl(Symbol.symbol YID, mo_member)))
 in (LrTable.NT 4,(result,YEXCEPTION1left,YRIGHTBRACE1right),rest671)
 end
| (239,(_,(_,_,YRIGHTBRACE1right))::_::(_,(MlyValue.YID YID,_,_))::(_,
(_,YEXCEPTION1left,_))::rest671) => let val result=MlyValue.except_dcl
((AST.ExceptDcl(Symbol.symbol YID, AST.NilExp :: nil)))
 in (LrTable.NT 4,(result,YEXCEPTION1left,YRIGHTBRACE1right),rest671)
 end
| (240,(_,(MlyValue.mo_member mo_member,_,mo_member1right))::(_,(
MlyValue.member member,member1left,_))::rest671) => let val result=
MlyValue.mo_member((member :: mo_member))
 in (LrTable.NT 116,(result,member1left,mo_member1right),rest671) end
| (241,(_,(MlyValue.member member,member1left,member1right))::rest671)
 => let val result=MlyValue.mo_member((member :: nil))
 in (LrTable.NT 116,(result,member1left,member1right),rest671) end
| (242,(_,(_,_,context_expr1right))::_::_::_::_::(_,(_,
op_attribute1left,_))::rest671) => let val result=MlyValue.op_dcl((
AST.NilExp))
 in (LrTable.NT 15,(result,op_attribute1left,context_expr1right),
rest671) end
| (243,(_,(_,_,raises_expr1right))::_::_::_::(_,(_,op_attribute1left,_
))::rest671) => let val result=MlyValue.op_dcl((AST.NilExp))
 in (LrTable.NT 15,(result,op_attribute1left,raises_expr1right),
rest671) end
| (244,(_,(_,_,context_expr1right))::_::_::_::(_,(_,op_attribute1left,
_))::rest671) => let val result=MlyValue.op_dcl((AST.NilExp))
 in (LrTable.NT 15,(result,op_attribute1left,context_expr1right),
rest671) end
| (245,(_,(MlyValue.parameter_dcls parameter_dcls,_,
parameter_dcls1right))::(_,(MlyValue.YID YID,_,_))::(_,(
MlyValue.op_type_spec op_type_spec,_,_))::(_,(_,op_attribute1left,_))
::rest671) => let val result=MlyValue.op_dcl((
AST.OpExp(op_type_spec, Symbol.symbol YID, parameter_dcls)))
 in (LrTable.NT 15,(result,op_attribute1left,parameter_dcls1right),
rest671) end
| (246,(_,(_,_,context_expr1right))::_::_::_::(_,(_,op_type_spec1left,
_))::rest671) => let val result=MlyValue.op_dcl((AST.NilExp))
 in (LrTable.NT 15,(result,op_type_spec1left,context_expr1right),
rest671) end
| (247,(_,(_,_,raises_expr1right))::_::_::(_,(_,op_type_spec1left,_))
::rest671) => let val result=MlyValue.op_dcl((AST.NilExp))
 in (LrTable.NT 15,(result,op_type_spec1left,raises_expr1right),
rest671) end
| (248,(_,(_,_,context_expr1right))::_::_::(_,(_,op_type_spec1left,_))
::rest671) => let val result=MlyValue.op_dcl((AST.NilExp))
 in (LrTable.NT 15,(result,op_type_spec1left,context_expr1right),
rest671) end
| (249,(_,(MlyValue.parameter_dcls parameter_dcls,_,
parameter_dcls1right))::(_,(MlyValue.YID YID,_,_))::(_,(
MlyValue.op_type_spec op_type_spec,op_type_spec1left,_))::rest671) => 
let val result=MlyValue.op_dcl((
AST.OpExp(op_type_spec, Symbol.symbol YID, parameter_dcls)))
 in (LrTable.NT 15,(result,op_type_spec1left,parameter_dcls1right),
rest671) end
| (250,(_,(_,YONEWAY1left,YONEWAY1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 98,(result,YONEWAY1left,YONEWAY1right),rest671) end
| (251,(_,(MlyValue.param_type_spec param_type_spec,
param_type_spec1left,param_type_spec1right))::rest671) => let val 
result=MlyValue.op_type_spec((param_type_spec))
 in (LrTable.NT 99,(result,param_type_spec1left,param_type_spec1right)
,rest671) end
| (252,(_,(_,YVOID1left,YVOID1right))::rest671) => let val result=
MlyValue.op_type_spec((AST.VoidType))
 in (LrTable.NT 99,(result,YVOID1left,YVOID1right),rest671) end
| (253,(_,(_,_,YRIGHTPAREN1right))::(_,(MlyValue.mo_param_dcl 
mo_param_dcl,_,_))::(_,(MlyValue.param_dcl param_dcl,_,_))::(_,(_,
YLEFTPAREN1left,_))::rest671) => let val result=
MlyValue.parameter_dcls((param_dcl :: mo_param_dcl))
 in (LrTable.NT 100,(result,YLEFTPAREN1left,YRIGHTPAREN1right),rest671
) end
| (254,(_,(_,_,YRIGHTPAREN1right))::(_,(MlyValue.param_dcl param_dcl,_
,_))::(_,(_,YLEFTPAREN1left,_))::rest671) => let val result=
MlyValue.parameter_dcls((param_dcl :: nil))
 in (LrTable.NT 100,(result,YLEFTPAREN1left,YRIGHTPAREN1right),rest671
) end
| (255,(_,(_,_,YRIGHTPAREN1right))::(_,(_,YLEFTPAREN1left,_))::rest671
) => let val result=MlyValue.parameter_dcls((AST.NilExp :: nil))
 in (LrTable.NT 100,(result,YLEFTPAREN1left,YRIGHTPAREN1right),rest671
) end
| (256,(_,(MlyValue.mo_param_dcl mo_param_dcl,_,mo_param_dcl1right))::
(_,(MlyValue.param_dcl param_dcl,_,_))::(_,(_,YCOMMA1left,_))::rest671
) => let val result=MlyValue.mo_param_dcl((param_dcl :: mo_param_dcl))
 in (LrTable.NT 119,(result,YCOMMA1left,mo_param_dcl1right),rest671)
 end
| (257,(_,(MlyValue.param_dcl param_dcl,_,param_dcl1right))::(_,(_,
YCOMMA1left,_))::rest671) => let val result=MlyValue.mo_param_dcl((
param_dcl :: nil))
 in (LrTable.NT 119,(result,YCOMMA1left,param_dcl1right),rest671) end
| (258,(_,(MlyValue.simple_declarator simple_declarator,_,
simple_declarator1right))::(_,(MlyValue.param_type_spec 
param_type_spec,_,_))::(_,(MlyValue.param_attribute param_attribute,
param_attribute1left,_))::rest671) => let val result=
MlyValue.param_dcl((
AST.ParamExp(param_attribute, param_type_spec, simple_declarator)))
 in (LrTable.NT 103,(result,param_attribute1left,
simple_declarator1right),rest671) end
| (259,(_,(_,YIN1left,YIN1right))::rest671) => let val result=
MlyValue.param_attribute((AST.InAttrib))
 in (LrTable.NT 104,(result,YIN1left,YIN1right),rest671) end
| (260,(_,(_,YOUT1left,YOUT1right))::rest671) => let val result=
MlyValue.param_attribute((AST.OutAttrib))
 in (LrTable.NT 104,(result,YOUT1left,YOUT1right),rest671) end
| (261,(_,(_,YINOUT1left,YINOUT1right))::rest671) => let val result=
MlyValue.param_attribute((AST.InOutAttrib))
 in (LrTable.NT 104,(result,YINOUT1left,YINOUT1right),rest671) end
| (262,(_,(_,_,YRIGHTPAREN1right))::_::_::_::(_,(_,YRAISES1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 101,(result,YRAISES1left,YRIGHTPAREN1right),rest671)
 end
| (263,(_,(_,_,YRIGHTPAREN1right))::_::_::(_,(_,YRAISES1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 101,(result,YRAISES1left,YRIGHTPAREN1right),rest671)
 end
| (264,(_,(_,_,mo_scoped_name1right))::_::(_,(_,YCOMMA1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 120,(result,YCOMMA1left,mo_scoped_name1right),rest671)
 end
| (265,(_,(_,_,scoped_name1right))::(_,(_,YCOMMA1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 120,(result,YCOMMA1left,scoped_name1right),rest671)
 end
| (266,(_,(_,_,YRIGHTPAREN1right))::_::_::_::(_,(_,YCONTEXT1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 102,(result,YCONTEXT1left,YRIGHTPAREN1right),rest671)
 end
| (267,(_,(_,_,YRIGHTPAREN1right))::_::_::(_,(_,YCONTEXT1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 102,(result,YCONTEXT1left,YRIGHTPAREN1right),rest671)
 end
| (268,(_,(_,_,mo_string_literal1right))::_::(_,(_,YCOMMA1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 121,(result,YCOMMA1left,mo_string_literal1right),
rest671) end
| (269,(_,(_,_,string_literal1right))::(_,(_,YCOMMA1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 121,(result,YCOMMA1left,string_literal1right),rest671)
 end
| (270,(_,(MlyValue.base_type_spec base_type_spec,base_type_spec1left,
base_type_spec1right))::rest671) => let val result=
MlyValue.param_type_spec((base_type_spec))
 in (LrTable.NT 32,(result,base_type_spec1left,base_type_spec1right),
rest671) end
| (271,(_,(MlyValue.string_type string_type,string_type1left,
string_type1right))::rest671) => let val result=
MlyValue.param_type_spec((string_type))
 in (LrTable.NT 32,(result,string_type1left,string_type1right),rest671
) end
| (272,(_,(MlyValue.wide_string_type wide_string_type,
wide_string_type1left,wide_string_type1right))::rest671) => let val 
result=MlyValue.param_type_spec((wide_string_type))
 in (LrTable.NT 32,(result,wide_string_type1left,
wide_string_type1right),rest671) end
| (273,(_,(MlyValue.scoped_name scoped_name,scoped_name1left,
scoped_name1right))::rest671) => let val result=
MlyValue.param_type_spec((AST.ScopedType(scoped_name)))
 in (LrTable.NT 32,(result,scoped_name1left,scoped_name1right),rest671
) end
| (274,(_,(_,_,YRIGHTANGLE1right))::_::_::_::_::(_,(_,YFIXED1left,_))
::rest671) => let val result=MlyValue.fixed_pt_type((AST.NilType))
 in (LrTable.NT 77,(result,YFIXED1left,YRIGHTANGLE1right),rest671) end
| (275,(_,(_,YFIXED1left,YFIXED1right))::rest671) => let val result=
MlyValue.fixed_pt_const_type((AST.FixedPtType))
 in (LrTable.NT 43,(result,YFIXED1left,YFIXED1right),rest671) end
| (276,(_,(_,YVALUEBASE1left,YVALUEBASE1right))::rest671) => let val 
result=MlyValue.value_base_type((AST.ValueBaseType))
 in (LrTable.NT 75,(result,YVALUEBASE1left,YVALUEBASE1right),rest671)
 end
| (277,(_,(_,_,YID1right))::(_,(_,YSTRUCT1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 68,(result,YSTRUCT1left,YID1right),rest671) end
| (278,(_,(_,_,YID1right))::(_,(_,YUNION1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 68,(result,YUNION1left,YID1right),rest671) end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.idl_file x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a 
end
end
structure Tokens : Idl_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun YABSTRACT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun YANY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun YATTRIBUTE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun YBOOLEAN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun YCASE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun YCHAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun YCONST (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun YCONTEXT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun YCUSTOM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun YDEFAULT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun YDOUBLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun YEXCEPTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun YENUM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun YFACTORY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun YFALSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun YFIXED (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun YFLOAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun YIN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun YINOUT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun YINTERFACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun YLOCAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun YLONG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun YMODULE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun YNATIVE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun YOBJECT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun YOCTET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun YONEWAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun YOUT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun YPRIVATE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun YPUBLIC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun YRAISES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun YREADONLY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun YSEQUENCE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun YSHORT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun YSTRING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun YSTRUCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun YSUPPORTS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun YSWITCH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun YTRUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun YTRUNCATABLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun YTYPEDEF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun YUNSIGNED (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun YUNION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun YVALUEBASE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun YVALUETYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun YVOID (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun YWCHAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun YWSTRING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun YSEMI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun YDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun YCOMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun YCOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun YCOLONCOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun YLEFTPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun YRIGHTPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun YLEFTBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun YRIGHTBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun YLEFTANGLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun YRIGHTANGLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun YEQUALS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun YVBAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun YMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun YPLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun YTILDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun YMOD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun YAND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun YCARAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun YASTERISK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun YFWDSLASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun YLEFTBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69,(
ParserData.MlyValue.VOID,p1,p2))
fun YRIGHTBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 70,(
ParserData.MlyValue.VOID,p1,p2))
fun YDBLLEFTANGLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 71,(
ParserData.MlyValue.VOID,p1,p2))
fun YDBLRIGHTANGLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 72,(
ParserData.MlyValue.VOID,p1,p2))
fun YID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 73,(
ParserData.MlyValue.YID i,p1,p2))
fun YINTEGER (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 74,(
ParserData.MlyValue.YINTEGER i,p1,p2))
fun YOCTINTEGER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 75,(
ParserData.MlyValue.VOID,p1,p2))
fun YHEXINTEGER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 76,(
ParserData.MlyValue.VOID,p1,p2))
fun YCHARLITERAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 77,(
ParserData.MlyValue.VOID,p1,p2))
fun YWCHARLITERAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 78,(
ParserData.MlyValue.VOID,p1,p2))
fun YFLOATLITERAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 79,(
ParserData.MlyValue.VOID,p1,p2))
fun YSTRINGLITERAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 80,(
ParserData.MlyValue.VOID,p1,p2))
fun YWSTRINGLITERAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 81,(
ParserData.MlyValue.VOID,p1,p2))
fun YFIXEDPTLITERAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 82,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 83,(
ParserData.MlyValue.VOID,p1,p2))
end
end
