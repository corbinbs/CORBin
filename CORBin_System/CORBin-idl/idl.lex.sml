functor IdlLexFun(structure Tokens: Idl_TOKENS)=
   struct
    structure UserDeclarations =
      struct
(****************************************************************)
(* idl.lex:  ML-Lex file for CORBin-idl 			*)
(* Author:   Brian S. Corbin					*)
(* Created:  Sat Jan 13 23:05:06 EST 2001 			*)
(* Modified: Wed Jan 17 15:00:48 EST 2001 			*)
(****************************************************************)

(* ML Declarations *)

structure Tokens = Tokens

type pos = int
type svalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (svalue, pos) token 

open Tokens

val lineNum = ErrorMsg.lineNum 
val linePos = ErrorMsg.linePos 

fun eof() = Tokens.EOF(!lineNum,!lineNum)

structure KeyWord : sig 
			val find : string -> 
				 (int * int -> (svalue, int) token) option
		    end =
  struct 

	val TableSize = 211 
	val HashFactor = 5

	val hash = fn s => 
	    foldl (fn (c,v)=>(v*HashFactor+(ord c)) mod TableSize) 0 (explode s)	

	val HashTable = Array.array(TableSize, nil) :
		(string * (int * int -> (svalue, int) token)) list Array.array

	val add = fn (s, v) =>
	  let val i = hash s
	  in Array.update(HashTable,i,(s,v) :: (Array.sub(HashTable, i)))
	  end

	val find = fn s =>
	  let val i = hash s 
	      fun f ((key,v)::r) = if s=key then SOME v else f r
		| f nil = NONE
	  in f (Array.sub(HashTable, i))
	  end 

(* IDL Keywords from CORBA Ver. 2.4 IDL Syntax & Semantics Documentation *)

	val _ = 
	    (List.app add
	[("abstract", YABSTRACT),
	 ("any", YANY),
	 ("attribute", YATTRIBUTE),
	 ("boolean", YBOOLEAN),
	 ("case", YCASE),
	 ("char", YCHAR),
	 ("const", YCONST),
	 ("context", YCONTEXT),
	 ("custom", YCUSTOM),
	 ("default", YDEFAULT),
	 ("double", YDOUBLE),
	 ("exception", YEXCEPTION),
	 ("enum", YENUM),
	 ("factory", YFACTORY),
	 ("FALSE", YFALSE),
	 ("fixed", YFIXED),
	 ("float", YFLOAT),
	 ("in", YIN),
	 ("inout", YINOUT),
	 ("interface", YINTERFACE),
	 ("local", YLOCAL),
	 ("long", YLONG),
	 ("module", YMODULE),
	 ("native", YNATIVE),
	 ("Object", YOBJECT),
	 ("octet", YOCTET),
	 ("oneway", YONEWAY),
	 ("out", YOUT),
	 ("private", YPRIVATE),
	 ("public", YPUBLIC),
	 ("raises", YRAISES),
	 ("readonly", YREADONLY),
	 ("sequence", YSEQUENCE),
	 ("short", YSHORT),
	 ("string", YSTRING),
	 ("struct", YSTRUCT),
	 ("supports", YSUPPORTS),
	 ("switch", YSWITCH),
	 ("TRUE", YTRUE),
	 ("truncatable", YTRUNCATABLE),
	 ("typedef", YTYPEDEF),
	 ("unsigned", YUNSIGNED),
	 ("union", YUNION),
	 ("ValueBase", YVALUEBASE),
	 ("valuetype", YVALUETYPE),
	 ("void", YVOID),
	 ("wchar", YWCHAR),
	 ("wstring", YWSTRING)
	])	

   end 
   open KeyWord

end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\007\007\007\007\007\007\007\007\007\066\070\007\007\068\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\066\007\063\007\007\062\061\058\057\056\055\054\053\052\050\047\
\\042\033\033\033\033\033\033\033\033\033\031\030\028\027\025\007\
\\007\012\012\012\012\012\012\012\012\012\012\012\018\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\017\007\016\015\007\
\\007\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\011\010\009\008\007\
\\007"
),
 (3, 
"\071\071\071\071\071\071\071\071\071\071\076\071\071\074\071\071\
\\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\
\\071\071\071\071\071\071\071\071\071\071\072\071\071\071\071\071\
\\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\
\\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\
\\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\
\\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\
\\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\
\\071"
),
 (5, 
"\077\077\077\077\077\077\077\077\077\077\080\077\077\078\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\077\
\\077"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\014\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\022\000\000\000\000\019\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\014\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (19, 
"\020\020\020\020\020\020\020\020\020\020\000\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\
\\020"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (22, 
"\023\023\023\023\023\023\023\023\023\023\000\023\023\023\023\023\
\\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\
\\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\
\\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\
\\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\
\\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\
\\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\
\\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\023\
\\023"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\\038\038\038\038\038\038\038\038\038\038\000\000\000\000\000\000\
\\000\000\000\000\037\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\037\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\
\\035\035\035\035\035\035\035\035\035\035\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\035\035\035\035\035\035\035\035\035\035\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\040\040\040\040\040\040\040\040\040\040\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\040\040\040\040\040\040\040\040\040\040\000\000\000\000\000\000\
\\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\\046\046\046\046\046\046\046\046\045\045\000\000\000\000\000\000\
\\000\000\000\000\037\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\\000\000\000\000\037\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\044\044\044\044\044\044\044\044\044\044\000\000\000\000\000\000\
\\000\044\044\044\044\044\044\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\044\044\044\044\044\044\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\\045\045\045\045\045\045\045\045\045\045\000\000\000\000\000\000\
\\000\000\000\000\037\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\037\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\\046\046\046\046\046\046\046\046\045\045\000\000\000\000\000\000\
\\000\000\000\000\037\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\037\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\048\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\051\051\051\051\051\051\051\051\051\051\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\051\051\051\051\051\051\051\051\051\051\000\000\000\000\000\000\
\\000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\059\059\059\059\059\059\059\059\059\059\000\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (63, 
"\064\064\064\064\064\064\064\064\064\064\000\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\067\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\067\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\070\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (72, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (76, 
"\000\000\000\000\000\000\000\000\000\000\076\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (80, 
"\000\000\000\000\000\000\000\000\000\000\080\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 152)], trans = 0},
{fin = [(N 136),(N 152)], trans = 0},
{fin = [(N 116),(N 152)], trans = 0},
{fin = [(N 130),(N 152)], trans = 0},
{fin = [(N 114),(N 152)], trans = 0},
{fin = [(N 11),(N 16),(N 152)], trans = 12},
{fin = [(N 11),(N 16)], trans = 12},
{fin = [(N 16)], trans = 14},
{fin = [(N 142),(N 152)], trans = 0},
{fin = [(N 150),(N 152)], trans = 0},
{fin = [(N 148),(N 152)], trans = 0},
{fin = [(N 11),(N 16),(N 152)], trans = 18},
{fin = [], trans = 19},
{fin = [], trans = 20},
{fin = [(N 72)], trans = 0},
{fin = [], trans = 22},
{fin = [], trans = 23},
{fin = [(N 85)], trans = 0},
{fin = [(N 126),(N 152)], trans = 25},
{fin = [(N 124)], trans = 0},
{fin = [(N 128),(N 152)], trans = 0},
{fin = [(N 121),(N 152)], trans = 28},
{fin = [(N 119)], trans = 0},
{fin = [(N 99),(N 152)], trans = 0},
{fin = [(N 108),(N 152)], trans = 31},
{fin = [(N 106)], trans = 0},
{fin = [(N 19),(N 152)], trans = 33},
{fin = [], trans = 34},
{fin = [(N 47)], trans = 35},
{fin = [], trans = 35},
{fin = [(N 57)], trans = 0},
{fin = [(N 19)], trans = 33},
{fin = [(N 34)], trans = 39},
{fin = [(N 34),(N 39)], trans = 40},
{fin = [(N 65)], trans = 0},
{fin = [(N 22),(N 152)], trans = 42},
{fin = [], trans = 43},
{fin = [(N 29)], trans = 43},
{fin = [], trans = 45},
{fin = [(N 22)], trans = 46},
{fin = [(N 146),(N 152)], trans = 47},
{fin = [(N 97)], trans = 0},
{fin = [(N 94)], trans = 0},
{fin = [(N 101),(N 152)], trans = 50},
{fin = [(N 39)], trans = 51},
{fin = [(N 132),(N 152)], trans = 0},
{fin = [(N 103),(N 152)], trans = 0},
{fin = [(N 134),(N 152)], trans = 0},
{fin = [(N 144),(N 152)], trans = 0},
{fin = [(N 112),(N 152)], trans = 0},
{fin = [(N 110),(N 152)], trans = 0},
{fin = [(N 152)], trans = 58},
{fin = [], trans = 59},
{fin = [(N 78)], trans = 0},
{fin = [(N 140),(N 152)], trans = 0},
{fin = [(N 138),(N 152)], trans = 0},
{fin = [(N 152)], trans = 63},
{fin = [], trans = 64},
{fin = [(N 91)], trans = 0},
{fin = [(N 2),(N 152)], trans = 66},
{fin = [(N 2)], trans = 66},
{fin = [(N 8),(N 152)], trans = 68},
{fin = [(N 8)], trans = 68},
{fin = [(N 5)], trans = 70},
{fin = [(N 157)], trans = 0},
{fin = [(N 157)], trans = 72},
{fin = [(N 155)], trans = 0},
{fin = [(N 157),(N 163)], trans = 74},
{fin = [(N 163)], trans = 74},
{fin = [(N 160)], trans = 76},
{fin = [(N 165)], trans = 0},
{fin = [(N 165),(N 171)], trans = 78},
{fin = [(N 171)], trans = 78},
{fin = [(N 168)], trans = 80}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val CXX_COMMENT = STARTSTATE 5;
val C_COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let val yytext = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  101 => (Tokens.YDOT(!lineNum,!lineNum))
| 103 => (Tokens.YCOMMA(!lineNum,!lineNum))
| 106 => (Tokens.YCOLONCOLON(!lineNum,!lineNum))
| 108 => (Tokens.YCOLON(!lineNum,!lineNum))
| 11 => (case find yytext of SOME v => v(yypos, yypos+String.size yytext)
					 | _ => YID(yytext,!lineNum, !lineNum))
| 110 => (Tokens.YLEFTPAREN(!lineNum,!lineNum))
| 112 => (Tokens.YRIGHTPAREN(!lineNum,!lineNum))
| 114 => (Tokens.YLEFTBRACE(!lineNum,!lineNum))
| 116 => (Tokens.YRIGHTBRACE(!lineNum,!lineNum))
| 119 => (Tokens.YDBLLEFTANGLE(!lineNum,!lineNum))
| 121 => (Tokens.YLEFTANGLE(!lineNum,!lineNum))
| 124 => (Tokens.YDBLRIGHTANGLE(!lineNum,!lineNum))
| 126 => (Tokens.YRIGHTANGLE(!lineNum,!lineNum))
| 128 => (Tokens.YEQUALS(!lineNum,!lineNum))
| 130 => (Tokens.YVBAR(!lineNum,!lineNum))
| 132 => (Tokens.YMINUS(!lineNum,!lineNum))
| 134 => (Tokens.YPLUS(!lineNum,!lineNum))
| 136 => (Tokens.YTILDE(!lineNum,!lineNum))
| 138 => (Tokens.YMOD(!lineNum,!lineNum))
| 140 => (Tokens.YAND(!lineNum,!lineNum))
| 142 => (Tokens.YCARAT(!lineNum,!lineNum))
| 144 => (Tokens.YASTERISK(!lineNum,!lineNum))
| 146 => (Tokens.YFWDSLASH(!lineNum,!lineNum))
| 148 => (Tokens.YLEFTBRACKET(!lineNum,!lineNum))
| 150 => (Tokens.YRIGHTBRACKET(!lineNum,!lineNum))
| 152 => (ErrorMsg.error (!lineNum) ("illegal character " ^ yytext);
	     lex())
| 155 => (YYBEGIN INITIAL; lex())
| 157 => (lex())
| 16 => (Tokens.YID(yytext,!lineNum,!lineNum))
| 160 => (lineNum := !lineNum+(String.size yytext); linePos := yypos :: !linePos; lex())
| 163 => (lineNum := !lineNum+(String.size yytext); linePos := yypos :: !linePos; lex())
| 165 => (lex())
| 168 => (YYBEGIN INITIAL; 
		   lineNum := !lineNum+(String.size yytext); linePos := yypos :: !linePos; lex())
| 171 => (YYBEGIN INITIAL; 
		   lineNum := !lineNum+(String.size yytext); linePos := yypos :: !linePos; lex())
| 19 => (Tokens.YINTEGER(Int.fromString (yytext),!lineNum, !lineNum))
| 2 => (lex())
| 22 => (Tokens.YOCTINTEGER(!lineNum, !lineNum))
| 29 => (Tokens.YHEXINTEGER(!lineNum, !lineNum))
| 34 => (Tokens.YFLOATLITERAL(!lineNum, !lineNum))
| 39 => (Tokens.YFLOATLITERAL(!lineNum, !lineNum))
| 47 => (Tokens.YFLOATLITERAL(!lineNum, !lineNum))
| 5 => ( lineNum := !lineNum+(String.size yytext); linePos := yypos :: !linePos; lex())
| 57 => (Tokens.YFIXEDPTLITERAL(!lineNum, !lineNum))
| 65 => (Tokens.YFIXEDPTLITERAL(!lineNum, !lineNum))
| 72 => (Tokens.YWCHARLITERAL(!lineNum,!lineNum))
| 78 => (Tokens.YCHARLITERAL(!lineNum,!lineNum))
| 8 => ( lineNum := !lineNum+(String.size yytext); linePos := yypos :: !linePos; lex())
| 85 => (Tokens.YWSTRINGLITERAL(!lineNum,!lineNum))
| 91 => (Tokens.YSTRINGLITERAL(!lineNum,!lineNum))
| 94 => (YYBEGIN C_COMMENT; lex())
| 97 => (YYBEGIN CXX_COMMENT; lex())
| 99 => (Tokens.YSEMI(!lineNum,!lineNum))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(String.sub(!yyb,l))
		val NewState = if NewChar<128 then Char.ord(String.sub(trans,NewChar)) else Char.ord(String.sub(trans,128))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
