// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.

#include "account.hh"
#include <omniORB3/callDescriptor.h>

static const char* _0RL_library_version = omniORB_3_0;

Account_ptr Account_Helper::_nil() {
  return Account::_nil();
}

CORBA::Boolean Account_Helper::is_nil(Account_ptr p) {
  return CORBA::is_nil(p);

}

void Account_Helper::release(Account_ptr p) {
  CORBA::release(p);
}

void Account_Helper::duplicate(Account_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t Account_Helper::NP_alignedSize(Account_ptr obj, size_t offset) {
  return Account::_alignedSize(obj, offset);
}

void Account_Helper::marshalObjRef(Account_ptr obj, NetBufferedStream& s) {
  Account::_marshalObjRef(obj, s);
}

Account_ptr Account_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return Account::_unmarshalObjRef(s);
}

void Account_Helper::marshalObjRef(Account_ptr obj, MemBufferedStream& s) {
  Account::_marshalObjRef(obj, s);
}

Account_ptr Account_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return Account::_unmarshalObjRef(s);
}

Account_ptr
Account::_duplicate(Account_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

Account_ptr
Account::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

Account_ptr
Account::_nil()
{
  static _objref_Account* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_Account;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* Account::_PD_repoId = "IDL:Account:1.0";

_objref_Account::~_objref_Account() {}

_objref_Account::_objref_Account(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(Account::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_Account::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, Account::_PD_repoId) )
    return (Account_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_plong
class _0RL_cd_0a01bdf5e4f42031_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a01bdf5e4f42031_00000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::ULong a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::ULong arg_0;
  
};

CORBA::ULong _0RL_cd_0a01bdf5e4f42031_00000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_0a01bdf5e4f42031_00000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_0a01bdf5e4f42031_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a01bdf5e4f42031_00000000* tcd = (_0RL_cd_0a01bdf5e4f42031_00000000*) cd;
  _impl_Account* impl = (_impl_Account*) svnt->_ptrToInterface(Account::_PD_repoId);
  impl->deposit(tcd->arg_0);
}

void _objref_Account::deposit(CORBA::ULong amount)
{
  _0RL_cd_0a01bdf5e4f42031_00000000 _call_desc(_0RL_lcfn_0a01bdf5e4f42031_10000000, "deposit", 8, 0, amount);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_0a01bdf5e4f42031_20000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a01bdf5e4f42031_00000000* tcd = (_0RL_cd_0a01bdf5e4f42031_00000000*) cd;
  _impl_Account* impl = (_impl_Account*) svnt->_ptrToInterface(Account::_PD_repoId);
  impl->withdraw(tcd->arg_0);
}

void _objref_Account::withdraw(CORBA::ULong amount)
{
  _0RL_cd_0a01bdf5e4f42031_00000000 _call_desc(_0RL_lcfn_0a01bdf5e4f42031_20000000, "withdraw", 9, 0, amount);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _clong
class _0RL_cd_0a01bdf5e4f42031_30000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a01bdf5e4f42031_30000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Long result() { return pd_result; }
  
  CORBA::Long pd_result;
  
};

void _0RL_cd_0a01bdf5e4f42031_30000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_clong
class _0RL_cd_0a01bdf5e4f42031_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0a01bdf5e4f42031_40000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::Long arg_0;
  
};

CORBA::ULong _0RL_cd_0a01bdf5e4f42031_40000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_0a01bdf5e4f42031_40000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_0a01bdf5e4f42031_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0a01bdf5e4f42031_30000000* tcd = (_0RL_cd_0a01bdf5e4f42031_30000000*) cd;
  _impl_Account* impl = (_impl_Account*) svnt->_ptrToInterface(Account::_PD_repoId);
  tcd->pd_result = impl->balance();
}

CORBA::Long _objref_Account::balance()
{
  _0RL_cd_0a01bdf5e4f42031_30000000 _call_desc(_0RL_lcfn_0a01bdf5e4f42031_50000000, "_get_balance", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_Account::~_pof_Account() {}

omniObjRef*
_pof_Account::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_Account(mdri, p, id, lid);
}

CORBA::Boolean
_pof_Account::is_a(const char* id) const
{
  if( !strcmp(id, Account::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_Account _the_pof_Account;

_impl_Account::~_impl_Account() {}

CORBA::Boolean
_impl_Account::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "deposit") ) {
    
    CORBA::ULong arg_amount;
    
    arg_amount <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->deposit(arg_amount);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "withdraw") ) {
    
    CORBA::ULong arg_amount;
    
    arg_amount <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->withdraw(arg_amount);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_balance") ) {    
    giop_s.RequestReceived();
    CORBA::Long result = this->balance();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_Account::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, Account::_PD_repoId) )
    return (_impl_Account*) this;
  
  return 0;
}

const char*
_impl_Account::_mostDerivedRepoId()
{
  return Account::_PD_repoId;
}

POA_Account::~POA_Account() {}

