(* cutil.sml
 * 
 * The SMLNJ-C Interface is COPYRIGHT (c) 1996 Bell Laboratories, Lucent Technologies
 *)

functor CUtil (structure C: C_CALLS) : C_UTIL = 
	 struct 
		 open C

(****Main CORBin-lib Routines****)
	 val CORBin_exception_init' = 
		 registerAutoFreeCFn("CORBin_exception_init",[], CvoidT)
	 fun CORBin_exception_init () = 
		 let val Cvoid  = CORBin_exception_init' [] in () end
	 val CORBin_orb_init' = 
		 registerAutoFreeCFn("CORBin_orb_init",[CaddrT], CvoidT)
	 fun CORBin_orb_init p = 
		 let val Cvoid  = CORBin_orb_init' [Caddr p] in () end
	 val CORBin_string_to_object' = 
		 registerAutoFreeCFn("CORBin_string_to_object",[CstringT], CaddrT)
	 fun CORBin_string_to_object p = 
		 let val Caddr s = CORBin_string_to_object' [Cstring p] in s end
	 val CORBin_Object_release' = 
		 registerAutoFreeCFn("CORBin_Object_release",[CaddrT], CvoidT)
	 fun CORBin_Object_release p = 
		 let val Cvoid = CORBin_Object_release' [Caddr p] in () end
	 val CORBin_ORB_run' = 
		 registerAutoFreeCFn("CORBin_ORB_run",[], CvoidT)
	 fun CORBin_ORB_run () = 
		 let val Cvoid  = CORBin_ORB_run' [] in () end
	 val CORBin_ORB_resolve_initial_references' = 
		 registerAutoFreeCFn("CORBin_ORB_resolve_initial_references",[CstringT], CaddrT)
	 fun CORBin_ORB_resolve_initial_references p = 
		 let val Caddr s  = CORBin_ORB_resolve_initial_references' [Cstring p] in s end
	 val CORBin_PortableServer_POAManager_activate' = 
		 registerAutoFreeCFn("CORBin_PortableServer_POAManager_activate",[CaddrT], CvoidT)
	 fun CORBin_PortableServer_POAManager_activate p = 
		 let val Cvoid  = CORBin_PortableServer_POAManager_activate' [Caddr p] in () end
	 val CORBin_PortableServer_POA__get_the_POAManager' = 
		 registerAutoFreeCFn("CORBin_PortableServer_POA__get_the_POAManager",[CaddrT], CaddrT)
	 fun CORBin_PortableServer_POA__get_the_POAManager p = 
		 let val Caddr s  = CORBin_PortableServer_POA__get_the_POAManager' [Caddr p] in s  end
	 val CORBin_create_name' = 
		 registerAutoFreeCFn("CORBin_create_name",[CstringT], CaddrT)
	 fun CORBin_create_name p = 
		 let val Caddr s  = CORBin_create_name' [Cstring p] in s  end
	 val CORBin_CosNaming_NamingContext_resolve' = 
		 registerAutoFreeCFn("CORBin_CosNaming_NamingContext_resolve",[CaddrT,CaddrT], CaddrT)
	 fun CORBin_CosNaming_NamingContext_resolve (n,obj) = 
		 let val Caddr s  = CORBin_CosNaming_NamingContext_resolve' [Caddr n, Caddr obj] in s  end
	 val CORBin_CosNaming_NamingContext_bind' = 
		 registerAutoFreeCFn("CORBin_CosNaming_NamingContext_bind",[CaddrT,CaddrT,CaddrT], CvoidT)
	 fun CORBin_CosNaming_NamingContext_bind (ns,n,obj) = 
		 let val Cvoid  = CORBin_CosNaming_NamingContext_bind' [Caddr ns, Caddr n, Caddr obj] in () end
(****routines generated by corbin-idl****)

	val CORBin_Account_create' = 
		registerAutoFreeCFn("CORBin_Account_create", [CaddrT], CaddrT)
	fun CORBin_Account_create (poa) = 
		let val  Caddr an_obj = CORBin_Account_create' [Caddr poa] in  an_obj  end 

	val CORBin_Account_deposit' = 
		registerAutoFreeCFn("CORBin_Account_deposit", [CaddrT,ClongT], CvoidT)
	fun CORBin_Account_deposit (CORBin_this_obj_ref,amount) = 
		let val Cvoid  = CORBin_Account_deposit' [Caddr CORBin_this_obj_ref,Clong amount] in  ()  end 

	val CORBin_Account_deposit_SetMLFn' = 
		registerAutoFreeCFn("CORBin_Account_deposit_SetMLFn", [CfunctionT([ClongT],  CintT )],CvoidT)
	fun CORBin_Account_deposit_SetMLFn f = 
		let val  Cvoid  = CORBin_Account_deposit_SetMLFn' [Cfunction f] in  ()  end 

	val CORBin_Account_withdraw' = 
		registerAutoFreeCFn("CORBin_Account_withdraw", [CaddrT,ClongT], CvoidT)
	fun CORBin_Account_withdraw (CORBin_this_obj_ref,amount) = 
		let val Cvoid  = CORBin_Account_withdraw' [Caddr CORBin_this_obj_ref,Clong amount] in  ()  end 

	val CORBin_Account_withdraw_SetMLFn' = 
		registerAutoFreeCFn("CORBin_Account_withdraw_SetMLFn", [CfunctionT([ClongT],  CintT )],CvoidT)
	fun CORBin_Account_withdraw_SetMLFn f = 
		let val  Cvoid  = CORBin_Account_withdraw_SetMLFn' [Cfunction f] in  ()  end 



end (*end of cutil.sml*)
