/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef CosNaming_H
#define CosNaming_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(_CosNaming_Istring_defined)
#define _CosNaming_Istring_defined 1
   typedef CORBA_char *CosNaming_Istring;
#if !defined(TC_IMPL_TC_CosNaming_Istring_0)
#define TC_IMPL_TC_CosNaming_Istring_0 'C'
#define TC_IMPL_TC_CosNaming_Istring_1 'o'
#define TC_IMPL_TC_CosNaming_Istring_2 's'
#define TC_IMPL_TC_CosNaming_Istring_3 'N'
#define TC_IMPL_TC_CosNaming_Istring_4 'a'
#define TC_IMPL_TC_CosNaming_Istring_5 'm'
#define TC_IMPL_TC_CosNaming_Istring_6 'i'
#define TC_IMPL_TC_CosNaming_Istring_7 'n'
#define TC_IMPL_TC_CosNaming_Istring_8 'g'
   extern const struct CORBA_TypeCode_struct TC_CosNaming_Istring_struct;
#define TC_CosNaming_Istring ((CORBA_TypeCode)&TC_CosNaming_Istring_struct)
#endif
#define CosNaming_Istring__free CORBA_string__free
#endif
#if !defined(_CosNaming_NameComponent_defined)
#define _CosNaming_NameComponent_defined 1
   typedef struct
   {
      CosNaming_Istring id;
      CosNaming_Istring kind;
   }
   CosNaming_NameComponent;

#if !defined(TC_IMPL_TC_CosNaming_NameComponent_0)
#define TC_IMPL_TC_CosNaming_NameComponent_0 'C'
#define TC_IMPL_TC_CosNaming_NameComponent_1 'o'
#define TC_IMPL_TC_CosNaming_NameComponent_2 's'
#define TC_IMPL_TC_CosNaming_NameComponent_3 'N'
#define TC_IMPL_TC_CosNaming_NameComponent_4 'a'
#define TC_IMPL_TC_CosNaming_NameComponent_5 'm'
#define TC_IMPL_TC_CosNaming_NameComponent_6 'i'
#define TC_IMPL_TC_CosNaming_NameComponent_7 'n'
#define TC_IMPL_TC_CosNaming_NameComponent_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_NameComponent_struct;
#define TC_CosNaming_NameComponent ((CORBA_TypeCode)&TC_CosNaming_NameComponent_struct)
#endif
   extern CosNaming_NameComponent *CosNaming_NameComponent__alloc(void);
   extern gpointer CosNaming_NameComponent__free(gpointer mem, gpointer dat,
						 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CosNaming_NameComponent) && !defined(_CORBA_sequence_CosNaming_NameComponent_defined)
#define ORBIT_DECL_CORBA_sequence_CosNaming_NameComponent 1
#define _CORBA_sequence_CosNaming_NameComponent_defined 1
#define ORBIT_IMPL_CORBA_sequence_CosNaming_NameComponent_0 'C'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_NameComponent_1 'o'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_NameComponent_2 's'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_NameComponent_3 'N'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_NameComponent_4 'a'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_NameComponent_5 'm'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_NameComponent_6 'i'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_NameComponent_7 'n'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_NameComponent_8 'g'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CosNaming_NameComponent *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CosNaming_NameComponent;
#if !defined(TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_0)
#define TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_0 'C'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_1 'o'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_2 's'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_3 'N'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_4 'a'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_5 'm'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_6 'i'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_7 'n'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_NameComponent_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CosNaming_NameComponent_struct;
#define TC_CORBA_sequence_CosNaming_NameComponent ((CORBA_TypeCode)&TC_CORBA_sequence_CosNaming_NameComponent_struct)
#endif
   extern CORBA_sequence_CosNaming_NameComponent
      *CORBA_sequence_CosNaming_NameComponent__alloc(void);
   extern gpointer CORBA_sequence_CosNaming_NameComponent__free(gpointer mem,
								gpointer dat,
								CORBA_boolean free_strings);	/* ORBit internal use */
   CosNaming_NameComponent
      *CORBA_sequence_CosNaming_NameComponent_allocbuf(CORBA_unsigned_long
						       len);
#endif
#if !defined(_CosNaming_Name_defined)
#define _CosNaming_Name_defined 1
   typedef CORBA_sequence_CosNaming_NameComponent CosNaming_Name;
#if !defined(TC_IMPL_TC_CosNaming_Name_0)
#define TC_IMPL_TC_CosNaming_Name_0 'C'
#define TC_IMPL_TC_CosNaming_Name_1 'o'
#define TC_IMPL_TC_CosNaming_Name_2 's'
#define TC_IMPL_TC_CosNaming_Name_3 'N'
#define TC_IMPL_TC_CosNaming_Name_4 'a'
#define TC_IMPL_TC_CosNaming_Name_5 'm'
#define TC_IMPL_TC_CosNaming_Name_6 'i'
#define TC_IMPL_TC_CosNaming_Name_7 'n'
#define TC_IMPL_TC_CosNaming_Name_8 'g'
   extern const struct CORBA_TypeCode_struct TC_CosNaming_Name_struct;
#define TC_CosNaming_Name ((CORBA_TypeCode)&TC_CosNaming_Name_struct)
#endif
   extern CosNaming_Name *CosNaming_Name__alloc(void);
   extern gpointer CosNaming_Name__free(gpointer mem, gpointer dat,
					CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_CosNaming_BindingType_defined)
#define _CosNaming_BindingType_defined 1
   typedef enum
   {
      CosNaming_nobject,
      CosNaming_ncontext
   }
   CosNaming_BindingType;
#if !defined(TC_IMPL_TC_CosNaming_BindingType_0)
#define TC_IMPL_TC_CosNaming_BindingType_0 'C'
#define TC_IMPL_TC_CosNaming_BindingType_1 'o'
#define TC_IMPL_TC_CosNaming_BindingType_2 's'
#define TC_IMPL_TC_CosNaming_BindingType_3 'N'
#define TC_IMPL_TC_CosNaming_BindingType_4 'a'
#define TC_IMPL_TC_CosNaming_BindingType_5 'm'
#define TC_IMPL_TC_CosNaming_BindingType_6 'i'
#define TC_IMPL_TC_CosNaming_BindingType_7 'n'
#define TC_IMPL_TC_CosNaming_BindingType_8 'g'
   extern const struct CORBA_TypeCode_struct TC_CosNaming_BindingType_struct;
#define TC_CosNaming_BindingType ((CORBA_TypeCode)&TC_CosNaming_BindingType_struct)
#endif
#endif
#if !defined(_CosNaming_Binding_defined)
#define _CosNaming_Binding_defined 1
   typedef struct
   {
      CosNaming_Name binding_name;
      CosNaming_BindingType binding_type;
   }
   CosNaming_Binding;

#if !defined(TC_IMPL_TC_CosNaming_Binding_0)
#define TC_IMPL_TC_CosNaming_Binding_0 'C'
#define TC_IMPL_TC_CosNaming_Binding_1 'o'
#define TC_IMPL_TC_CosNaming_Binding_2 's'
#define TC_IMPL_TC_CosNaming_Binding_3 'N'
#define TC_IMPL_TC_CosNaming_Binding_4 'a'
#define TC_IMPL_TC_CosNaming_Binding_5 'm'
#define TC_IMPL_TC_CosNaming_Binding_6 'i'
#define TC_IMPL_TC_CosNaming_Binding_7 'n'
#define TC_IMPL_TC_CosNaming_Binding_8 'g'
   extern const struct CORBA_TypeCode_struct TC_CosNaming_Binding_struct;
#define TC_CosNaming_Binding ((CORBA_TypeCode)&TC_CosNaming_Binding_struct)
#endif
   extern CosNaming_Binding *CosNaming_Binding__alloc(void);
   extern gpointer CosNaming_Binding__free(gpointer mem, gpointer dat,
					   CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CosNaming_Binding) && !defined(_CORBA_sequence_CosNaming_Binding_defined)
#define ORBIT_DECL_CORBA_sequence_CosNaming_Binding 1
#define _CORBA_sequence_CosNaming_Binding_defined 1
#define ORBIT_IMPL_CORBA_sequence_CosNaming_Binding_0 'C'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_Binding_1 'o'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_Binding_2 's'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_Binding_3 'N'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_Binding_4 'a'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_Binding_5 'm'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_Binding_6 'i'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_Binding_7 'n'
#define ORBIT_IMPL_CORBA_sequence_CosNaming_Binding_8 'g'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CosNaming_Binding *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CosNaming_Binding;
#if !defined(TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_0)
#define TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_0 'C'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_1 'o'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_2 's'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_3 'N'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_4 'a'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_5 'm'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_6 'i'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_7 'n'
#define TC_IMPL_TC_CORBA_sequence_CosNaming_Binding_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CosNaming_Binding_struct;
#define TC_CORBA_sequence_CosNaming_Binding ((CORBA_TypeCode)&TC_CORBA_sequence_CosNaming_Binding_struct)
#endif
   extern CORBA_sequence_CosNaming_Binding
      *CORBA_sequence_CosNaming_Binding__alloc(void);
   extern gpointer CORBA_sequence_CosNaming_Binding__free(gpointer mem,
							  gpointer dat,
							  CORBA_boolean free_strings);	/* ORBit internal use */
   CosNaming_Binding
      *CORBA_sequence_CosNaming_Binding_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_CosNaming_BindingList_defined)
#define _CosNaming_BindingList_defined 1
   typedef CORBA_sequence_CosNaming_Binding CosNaming_BindingList;
#if !defined(TC_IMPL_TC_CosNaming_BindingList_0)
#define TC_IMPL_TC_CosNaming_BindingList_0 'C'
#define TC_IMPL_TC_CosNaming_BindingList_1 'o'
#define TC_IMPL_TC_CosNaming_BindingList_2 's'
#define TC_IMPL_TC_CosNaming_BindingList_3 'N'
#define TC_IMPL_TC_CosNaming_BindingList_4 'a'
#define TC_IMPL_TC_CosNaming_BindingList_5 'm'
#define TC_IMPL_TC_CosNaming_BindingList_6 'i'
#define TC_IMPL_TC_CosNaming_BindingList_7 'n'
#define TC_IMPL_TC_CosNaming_BindingList_8 'g'
   extern const struct CORBA_TypeCode_struct TC_CosNaming_BindingList_struct;
#define TC_CosNaming_BindingList ((CORBA_TypeCode)&TC_CosNaming_BindingList_struct)
#endif
   extern CosNaming_BindingList *CosNaming_BindingList__alloc(void);
   extern gpointer CosNaming_BindingList__free(gpointer mem, gpointer dat,
					       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CosNaming_BindingIterator) && !defined(_CosNaming_BindingIterator_defined)
#define ORBIT_DECL_CosNaming_BindingIterator 1
#define _CosNaming_BindingIterator_defined 1
#define CosNaming_BindingIterator__free CORBA_Object__free
   typedef CORBA_Object CosNaming_BindingIterator;
   extern CORBA_unsigned_long CosNaming_BindingIterator__classid;
#if !defined(TC_IMPL_TC_CosNaming_BindingIterator_0)
#define TC_IMPL_TC_CosNaming_BindingIterator_0 'C'
#define TC_IMPL_TC_CosNaming_BindingIterator_1 'o'
#define TC_IMPL_TC_CosNaming_BindingIterator_2 's'
#define TC_IMPL_TC_CosNaming_BindingIterator_3 'N'
#define TC_IMPL_TC_CosNaming_BindingIterator_4 'a'
#define TC_IMPL_TC_CosNaming_BindingIterator_5 'm'
#define TC_IMPL_TC_CosNaming_BindingIterator_6 'i'
#define TC_IMPL_TC_CosNaming_BindingIterator_7 'n'
#define TC_IMPL_TC_CosNaming_BindingIterator_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_BindingIterator_struct;
#define TC_CosNaming_BindingIterator ((CORBA_TypeCode)&TC_CosNaming_BindingIterator_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CosNaming_NamingContext) && !defined(_CosNaming_NamingContext_defined)
#define ORBIT_DECL_CosNaming_NamingContext 1
#define _CosNaming_NamingContext_defined 1
#define CosNaming_NamingContext__free CORBA_Object__free
   typedef CORBA_Object CosNaming_NamingContext;
   extern CORBA_unsigned_long CosNaming_NamingContext__classid;
#if !defined(TC_IMPL_TC_CosNaming_NamingContext_0)
#define TC_IMPL_TC_CosNaming_NamingContext_0 'C'
#define TC_IMPL_TC_CosNaming_NamingContext_1 'o'
#define TC_IMPL_TC_CosNaming_NamingContext_2 's'
#define TC_IMPL_TC_CosNaming_NamingContext_3 'N'
#define TC_IMPL_TC_CosNaming_NamingContext_4 'a'
#define TC_IMPL_TC_CosNaming_NamingContext_5 'm'
#define TC_IMPL_TC_CosNaming_NamingContext_6 'i'
#define TC_IMPL_TC_CosNaming_NamingContext_7 'n'
#define TC_IMPL_TC_CosNaming_NamingContext_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_NamingContext_struct;
#define TC_CosNaming_NamingContext ((CORBA_TypeCode)&TC_CosNaming_NamingContext_struct)
#endif
#endif
#if !defined(_CosNaming_NamingContext_NotFoundReason_defined)
#define _CosNaming_NamingContext_NotFoundReason_defined 1
   typedef enum
   {
      CosNaming_NamingContext_missing_node,
      CosNaming_NamingContext_not_context,
      CosNaming_NamingContext_not_object
   }
   CosNaming_NamingContext_NotFoundReason;
#if !defined(TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_0)
#define TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_0 'C'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_1 'o'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_2 's'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_3 'N'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_4 'a'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_5 'm'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_6 'i'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_7 'n'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFoundReason_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_NamingContext_NotFoundReason_struct;
#define TC_CosNaming_NamingContext_NotFoundReason ((CORBA_TypeCode)&TC_CosNaming_NamingContext_NotFoundReason_struct)
#endif
#endif
#define ex_CosNaming_NamingContext_NotFound "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"
   void _ORBIT_CosNaming_NamingContext_NotFound_demarshal(GIOPRecvBuffer *
							  _ORBIT_recv_buffer,
							  CORBA_Environment *
							  ev);
   void _ORBIT_CosNaming_NamingContext_NotFound_marshal(GIOPSendBuffer *
							_ORBIT_send_buffer,
							CORBA_Environment *
							ev);
#if !defined(_CosNaming_NamingContext_NotFound_defined)
#define _CosNaming_NamingContext_NotFound_defined 1
   typedef struct
   {
      CosNaming_NamingContext_NotFoundReason why;
      CosNaming_Name rest_of_name;
   }
   CosNaming_NamingContext_NotFound;

#if !defined(TC_IMPL_TC_CosNaming_NamingContext_NotFound_0)
#define TC_IMPL_TC_CosNaming_NamingContext_NotFound_0 'C'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFound_1 'o'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFound_2 's'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFound_3 'N'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFound_4 'a'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFound_5 'm'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFound_6 'i'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFound_7 'n'
#define TC_IMPL_TC_CosNaming_NamingContext_NotFound_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_NamingContext_NotFound_struct;
#define TC_CosNaming_NamingContext_NotFound ((CORBA_TypeCode)&TC_CosNaming_NamingContext_NotFound_struct)
#endif
   extern CosNaming_NamingContext_NotFound
      *CosNaming_NamingContext_NotFound__alloc(void);
   extern gpointer CosNaming_NamingContext_NotFound__free(gpointer mem,
							  gpointer dat,
							  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_CosNaming_NamingContext_CannotProceed "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"
   void _ORBIT_CosNaming_NamingContext_CannotProceed_demarshal(GIOPRecvBuffer
							       *
							       _ORBIT_recv_buffer,
							       CORBA_Environment
							       * ev);
   void _ORBIT_CosNaming_NamingContext_CannotProceed_marshal(GIOPSendBuffer *
							     _ORBIT_send_buffer,
							     CORBA_Environment
							     * ev);
#if !defined(_CosNaming_NamingContext_CannotProceed_defined)
#define _CosNaming_NamingContext_CannotProceed_defined 1
   typedef struct
   {
      CosNaming_NamingContext ctx;
      CosNaming_Name rest_of_name;
   }
   CosNaming_NamingContext_CannotProceed;

#if !defined(TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_0)
#define TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_0 'C'
#define TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_1 'o'
#define TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_2 's'
#define TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_3 'N'
#define TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_4 'a'
#define TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_5 'm'
#define TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_6 'i'
#define TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_7 'n'
#define TC_IMPL_TC_CosNaming_NamingContext_CannotProceed_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_NamingContext_CannotProceed_struct;
#define TC_CosNaming_NamingContext_CannotProceed ((CORBA_TypeCode)&TC_CosNaming_NamingContext_CannotProceed_struct)
#endif
   extern CosNaming_NamingContext_CannotProceed
      *CosNaming_NamingContext_CannotProceed__alloc(void);
   extern gpointer CosNaming_NamingContext_CannotProceed__free(gpointer mem,
							       gpointer dat,
							       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_CosNaming_NamingContext_InvalidName "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"
   void _ORBIT_CosNaming_NamingContext_InvalidName_demarshal(GIOPRecvBuffer *
							     _ORBIT_recv_buffer,
							     CORBA_Environment
							     * ev);
   void _ORBIT_CosNaming_NamingContext_InvalidName_marshal(GIOPSendBuffer *
							   _ORBIT_send_buffer,
							   CORBA_Environment *
							   ev);
#if !defined(_CosNaming_NamingContext_InvalidName_defined)
#define _CosNaming_NamingContext_InvalidName_defined 1
   typedef struct
   {
      int dummy;
   }
   CosNaming_NamingContext_InvalidName;

#if !defined(TC_IMPL_TC_CosNaming_NamingContext_InvalidName_0)
#define TC_IMPL_TC_CosNaming_NamingContext_InvalidName_0 'C'
#define TC_IMPL_TC_CosNaming_NamingContext_InvalidName_1 'o'
#define TC_IMPL_TC_CosNaming_NamingContext_InvalidName_2 's'
#define TC_IMPL_TC_CosNaming_NamingContext_InvalidName_3 'N'
#define TC_IMPL_TC_CosNaming_NamingContext_InvalidName_4 'a'
#define TC_IMPL_TC_CosNaming_NamingContext_InvalidName_5 'm'
#define TC_IMPL_TC_CosNaming_NamingContext_InvalidName_6 'i'
#define TC_IMPL_TC_CosNaming_NamingContext_InvalidName_7 'n'
#define TC_IMPL_TC_CosNaming_NamingContext_InvalidName_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_NamingContext_InvalidName_struct;
#define TC_CosNaming_NamingContext_InvalidName ((CORBA_TypeCode)&TC_CosNaming_NamingContext_InvalidName_struct)
#endif
#define CosNaming_NamingContext_InvalidName__alloc() NULL
   extern gpointer CosNaming_NamingContext_InvalidName__free(gpointer mem,
							     gpointer dat,
							     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_CosNaming_NamingContext_AlreadyBound "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0"
   void _ORBIT_CosNaming_NamingContext_AlreadyBound_demarshal(GIOPRecvBuffer *
							      _ORBIT_recv_buffer,
							      CORBA_Environment
							      * ev);
   void _ORBIT_CosNaming_NamingContext_AlreadyBound_marshal(GIOPSendBuffer *
							    _ORBIT_send_buffer,
							    CORBA_Environment
							    * ev);
#if !defined(_CosNaming_NamingContext_AlreadyBound_defined)
#define _CosNaming_NamingContext_AlreadyBound_defined 1
   typedef struct
   {
      int dummy;
   }
   CosNaming_NamingContext_AlreadyBound;

#if !defined(TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_0)
#define TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_0 'C'
#define TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_1 'o'
#define TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_2 's'
#define TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_3 'N'
#define TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_4 'a'
#define TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_5 'm'
#define TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_6 'i'
#define TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_7 'n'
#define TC_IMPL_TC_CosNaming_NamingContext_AlreadyBound_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_NamingContext_AlreadyBound_struct;
#define TC_CosNaming_NamingContext_AlreadyBound ((CORBA_TypeCode)&TC_CosNaming_NamingContext_AlreadyBound_struct)
#endif
#define CosNaming_NamingContext_AlreadyBound__alloc() NULL
   extern gpointer CosNaming_NamingContext_AlreadyBound__free(gpointer mem,
							      gpointer dat,
							      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_CosNaming_NamingContext_NotEmpty "IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0"
   void _ORBIT_CosNaming_NamingContext_NotEmpty_demarshal(GIOPRecvBuffer *
							  _ORBIT_recv_buffer,
							  CORBA_Environment *
							  ev);
   void _ORBIT_CosNaming_NamingContext_NotEmpty_marshal(GIOPSendBuffer *
							_ORBIT_send_buffer,
							CORBA_Environment *
							ev);
#if !defined(_CosNaming_NamingContext_NotEmpty_defined)
#define _CosNaming_NamingContext_NotEmpty_defined 1
   typedef struct
   {
      int dummy;
   }
   CosNaming_NamingContext_NotEmpty;

#if !defined(TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_0)
#define TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_0 'C'
#define TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_1 'o'
#define TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_2 's'
#define TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_3 'N'
#define TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_4 'a'
#define TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_5 'm'
#define TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_6 'i'
#define TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_7 'n'
#define TC_IMPL_TC_CosNaming_NamingContext_NotEmpty_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_NamingContext_NotEmpty_struct;
#define TC_CosNaming_NamingContext_NotEmpty ((CORBA_TypeCode)&TC_CosNaming_NamingContext_NotEmpty_struct)
#endif
#define CosNaming_NamingContext_NotEmpty__alloc() NULL
   extern gpointer CosNaming_NamingContext_NotEmpty__free(gpointer mem,
							  gpointer dat,
							  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CosNaming_BindingIterator) && !defined(_CosNaming_BindingIterator_defined)
#define ORBIT_DECL_CosNaming_BindingIterator 1
#define _CosNaming_BindingIterator_defined 1
#define CosNaming_BindingIterator__free CORBA_Object__free
   typedef CORBA_Object CosNaming_BindingIterator;
   extern CORBA_unsigned_long CosNaming_BindingIterator__classid;
#if !defined(TC_IMPL_TC_CosNaming_BindingIterator_0)
#define TC_IMPL_TC_CosNaming_BindingIterator_0 'C'
#define TC_IMPL_TC_CosNaming_BindingIterator_1 'o'
#define TC_IMPL_TC_CosNaming_BindingIterator_2 's'
#define TC_IMPL_TC_CosNaming_BindingIterator_3 'N'
#define TC_IMPL_TC_CosNaming_BindingIterator_4 'a'
#define TC_IMPL_TC_CosNaming_BindingIterator_5 'm'
#define TC_IMPL_TC_CosNaming_BindingIterator_6 'i'
#define TC_IMPL_TC_CosNaming_BindingIterator_7 'n'
#define TC_IMPL_TC_CosNaming_BindingIterator_8 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CosNaming_BindingIterator_struct;
#define TC_CosNaming_BindingIterator ((CORBA_TypeCode)&TC_CosNaming_BindingIterator_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*bind) (PortableServer_Servant _servant, const CosNaming_Name * n,
		    const CORBA_Object obj, CORBA_Environment * ev);
      void (*rebind) (PortableServer_Servant _servant,
		      const CosNaming_Name * n, const CORBA_Object obj,
		      CORBA_Environment * ev);
      void (*bind_context) (PortableServer_Servant _servant,
			    const CosNaming_Name * n,
			    const CosNaming_NamingContext nc,
			    CORBA_Environment * ev);
      void (*rebind_context) (PortableServer_Servant _servant,
			      const CosNaming_Name * n,
			      const CosNaming_NamingContext nc,
			      CORBA_Environment * ev);
       CORBA_Object(*resolve) (PortableServer_Servant _servant,
			       const CosNaming_Name * n,
			       CORBA_Environment * ev);
      void (*unbind) (PortableServer_Servant _servant,
		      const CosNaming_Name * n, CORBA_Environment * ev);
       CosNaming_NamingContext(*new_context) (PortableServer_Servant _servant,
					      CORBA_Environment * ev);
       CosNaming_NamingContext(*bind_new_context) (PortableServer_Servant
						   _servant,
						   const CosNaming_Name * n,
						   CORBA_Environment * ev);
      void (*destroy) (PortableServer_Servant _servant,
		       CORBA_Environment * ev);
      void (*list) (PortableServer_Servant _servant,
		    const CORBA_unsigned_long how_many,
		    CosNaming_BindingList ** bl,
		    CosNaming_BindingIterator * bi, CORBA_Environment * ev);
   }
   POA_CosNaming_NamingContext__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_CosNaming_NamingContext__epv *CosNaming_NamingContext_epv;
   }
   POA_CosNaming_NamingContext__vepv;
   typedef struct
   {
      void *_private;
      POA_CosNaming_NamingContext__vepv *vepv;
   }
   POA_CosNaming_NamingContext;
   extern void POA_CosNaming_NamingContext__init(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   extern void POA_CosNaming_NamingContext__fini(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_boolean(*next_one) (PortableServer_Servant _servant,
				   CosNaming_Binding ** b,
				   CORBA_Environment * ev);
       CORBA_boolean(*next_n) (PortableServer_Servant _servant,
			       const CORBA_unsigned_long how_many,
			       CosNaming_BindingList ** bl,
			       CORBA_Environment * ev);
      void (*destroy) (PortableServer_Servant _servant,
		       CORBA_Environment * ev);
   }
   POA_CosNaming_BindingIterator__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_CosNaming_BindingIterator__epv *CosNaming_BindingIterator_epv;
   }
   POA_CosNaming_BindingIterator__vepv;
   typedef struct
   {
      void *_private;
      POA_CosNaming_BindingIterator__vepv *vepv;
   }
   POA_CosNaming_BindingIterator;
   extern void POA_CosNaming_BindingIterator__init(PortableServer_Servant
						   servant,
						   CORBA_Environment * ev);
   extern void POA_CosNaming_BindingIterator__fini(PortableServer_Servant
						   servant,
						   CORBA_Environment * ev);

/** prototypes **/
   void CosNaming_NamingContext_bind(CosNaming_NamingContext _obj,
				     const CosNaming_Name * n,
				     const CORBA_Object obj,
				     CORBA_Environment * ev);
   void CosNaming_NamingContext_rebind(CosNaming_NamingContext _obj,
				       const CosNaming_Name * n,
				       const CORBA_Object obj,
				       CORBA_Environment * ev);
   void CosNaming_NamingContext_bind_context(CosNaming_NamingContext _obj,
					     const CosNaming_Name * n,
					     const CosNaming_NamingContext nc,
					     CORBA_Environment * ev);
   void CosNaming_NamingContext_rebind_context(CosNaming_NamingContext _obj,
					       const CosNaming_Name * n,
					       const CosNaming_NamingContext
					       nc, CORBA_Environment * ev);
   CORBA_Object CosNaming_NamingContext_resolve(CosNaming_NamingContext _obj,
						const CosNaming_Name * n,
						CORBA_Environment * ev);
   void CosNaming_NamingContext_unbind(CosNaming_NamingContext _obj,
				       const CosNaming_Name * n,
				       CORBA_Environment * ev);
   CosNaming_NamingContext
      CosNaming_NamingContext_new_context(CosNaming_NamingContext _obj,
					  CORBA_Environment * ev);
   CosNaming_NamingContext
      CosNaming_NamingContext_bind_new_context(CosNaming_NamingContext _obj,
					       const CosNaming_Name * n,
					       CORBA_Environment * ev);
   void CosNaming_NamingContext_destroy(CosNaming_NamingContext _obj,
					CORBA_Environment * ev);
   void CosNaming_NamingContext_list(CosNaming_NamingContext _obj,
				     const CORBA_unsigned_long how_many,
				     CosNaming_BindingList ** bl,
				     CosNaming_BindingIterator * bi,
				     CORBA_Environment * ev);
   CORBA_boolean CosNaming_BindingIterator_next_one(CosNaming_BindingIterator
						    _obj,
						    CosNaming_Binding ** b,
						    CORBA_Environment * ev);
   CORBA_boolean CosNaming_BindingIterator_next_n(CosNaming_BindingIterator
						  _obj,
						  const CORBA_unsigned_long
						  how_many,
						  CosNaming_BindingList ** bl,
						  CORBA_Environment * ev);
   void CosNaming_BindingIterator_destroy(CosNaming_BindingIterator _obj,
					  CORBA_Environment * ev);

   void _ORBIT_skel_CosNaming_NamingContext_bind(POA_CosNaming_NamingContext *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_bind)
						 (PortableServer_Servant
						  _servant,
						  const CosNaming_Name * n,
						  const CORBA_Object obj,
						  CORBA_Environment * ev));
   void _ORBIT_skel_CosNaming_NamingContext_rebind(POA_CosNaming_NamingContext
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void (*_impl_rebind)
						   (PortableServer_Servant
						    _servant,
						    const CosNaming_Name * n,
						    const CORBA_Object obj,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_CosNaming_NamingContext_bind_context
      (POA_CosNaming_NamingContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_bind_context) (PortableServer_Servant _servant,
				   const CosNaming_Name * n,
				   const CosNaming_NamingContext nc,
				   CORBA_Environment * ev));
   void
      _ORBIT_skel_CosNaming_NamingContext_rebind_context
      (POA_CosNaming_NamingContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_rebind_context) (PortableServer_Servant _servant,
				     const CosNaming_Name * n,
				     const CosNaming_NamingContext nc,
				     CORBA_Environment * ev));
   void
      _ORBIT_skel_CosNaming_NamingContext_resolve(POA_CosNaming_NamingContext
						  * _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_Object(*_impl_resolve)
						  (PortableServer_Servant
						   _servant,
						   const CosNaming_Name * n,
						   CORBA_Environment * ev));
   void _ORBIT_skel_CosNaming_NamingContext_unbind(POA_CosNaming_NamingContext
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void (*_impl_unbind)
						   (PortableServer_Servant
						    _servant,
						    const CosNaming_Name * n,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_CosNaming_NamingContext_new_context
      (POA_CosNaming_NamingContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CosNaming_NamingContext(*_impl_new_context) (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_CosNaming_NamingContext_bind_new_context
      (POA_CosNaming_NamingContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CosNaming_NamingContext(*_impl_bind_new_context)
       (PortableServer_Servant _servant, const CosNaming_Name * n,
	CORBA_Environment * ev));
   void
      _ORBIT_skel_CosNaming_NamingContext_destroy(POA_CosNaming_NamingContext
						  * _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_destroy)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_CosNaming_NamingContext_list(POA_CosNaming_NamingContext *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_list)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_unsigned_long
						  how_many,
						  CosNaming_BindingList ** bl,
						  CosNaming_BindingIterator *
						  bi,
						  CORBA_Environment * ev));
   void
      _ORBIT_skel_CosNaming_BindingIterator_next_one
      (POA_CosNaming_BindingIterator * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_boolean(*_impl_next_one) (PortableServer_Servant _servant,
				       CosNaming_Binding ** b,
				       CORBA_Environment * ev));
   void
      _ORBIT_skel_CosNaming_BindingIterator_next_n
      (POA_CosNaming_BindingIterator * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_boolean(*_impl_next_n) (PortableServer_Servant _servant,
				     const CORBA_unsigned_long how_many,
				     CosNaming_BindingList ** bl,
				     CORBA_Environment * ev));
   void
      _ORBIT_skel_CosNaming_BindingIterator_destroy
      (POA_CosNaming_BindingIterator * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_destroy) (PortableServer_Servant _servant,
			      CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
