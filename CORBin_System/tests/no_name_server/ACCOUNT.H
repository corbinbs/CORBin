/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef account_H
#define account_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(ORBIT_DECL_Account) && !defined(_Account_defined)
#define ORBIT_DECL_Account 1
#define _Account_defined 1
#define Account__free CORBA_Object__free
   typedef CORBA_Object Account;
   extern CORBA_unsigned_long Account__classid;
#if !defined(TC_IMPL_TC_Account_0)
#define TC_IMPL_TC_Account_0 'a'
#define TC_IMPL_TC_Account_1 'c'
#define TC_IMPL_TC_Account_2 'c'
#define TC_IMPL_TC_Account_3 'o'
#define TC_IMPL_TC_Account_4 'u'
#define TC_IMPL_TC_Account_5 'n'
#define TC_IMPL_TC_Account_6 't'
   extern const struct CORBA_TypeCode_struct TC_Account_struct;
#define TC_Account ((CORBA_TypeCode)&TC_Account_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*deposit) (PortableServer_Servant _servant,
		       const CORBA_unsigned_long amount,
		       CORBA_Environment * ev);
      void (*withdraw) (PortableServer_Servant _servant,
			const CORBA_unsigned_long amount,
			CORBA_Environment * ev);
       CORBA_long(*_get_balance) (PortableServer_Servant _servant,
				  CORBA_Environment * ev);
   }
   POA_Account__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Account__epv *Account_epv;
   }
   POA_Account__vepv;
   typedef struct
   {
      void *_private;
      POA_Account__vepv *vepv;
   }
   POA_Account;
   extern void POA_Account__init(PortableServer_Servant servant,
				 CORBA_Environment * ev);
   extern void POA_Account__fini(PortableServer_Servant servant,
				 CORBA_Environment * ev);

/** prototypes **/
   void Account_deposit(Account _obj, const CORBA_unsigned_long amount,
			CORBA_Environment * ev);
   void Account_withdraw(Account _obj, const CORBA_unsigned_long amount,
			 CORBA_Environment * ev);
   CORBA_long Account__get_balance(Account _obj, CORBA_Environment * ev);

   void _ORBIT_skel_Account_deposit(POA_Account * _ORBIT_servant,
				    GIOPRecvBuffer * _ORBIT_recv_buffer,
				    CORBA_Environment * ev,
				    void (*_impl_deposit)
				    (PortableServer_Servant _servant,
				     const CORBA_unsigned_long amount,
				     CORBA_Environment * ev));
   void _ORBIT_skel_Account_withdraw(POA_Account * _ORBIT_servant,
				     GIOPRecvBuffer * _ORBIT_recv_buffer,
				     CORBA_Environment * ev,
				     void (*_impl_withdraw)
				     (PortableServer_Servant _servant,
				      const CORBA_unsigned_long amount,
				      CORBA_Environment * ev));
   void _ORBIT_skel_Account__get_balance(POA_Account * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 CORBA_long(*_impl__get_balance)
					 (PortableServer_Servant _servant,
					  CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
